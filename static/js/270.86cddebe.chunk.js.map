{"version":3,"file":"static/js/270.86cddebe.chunk.js","mappings":"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","sources":["pages/GridPage.tsx","../node_modules/@mui/system/esm/Container/createContainer.js","../node_modules/@mui/material/esm/Container/Container.js"],"sourcesContent":["// src/pages/DsGridPage.tsx\r\nimport React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport DsGrid, { DsGridItemStyled } from '../components/layout/DsGrid';\r\n\r\nconst DsGridPage = () => {\r\n    return (\r\n        // Container의 maxWidth 제한을 비활성화하여 전체 너비를 사용하도록 설정\r\n        <Container maxWidth={false}>\r\n            <Typography variant=\"h1\" component=\"h1\" gutterBottom>\r\n                Grid\r\n            </Typography>\r\n\r\n            <Box sx={{ flexGrow: 1 }}>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                    Basic DsGrid 예제 (MUI Grid 직접 사용과 동일)\r\n                </Typography>\r\n                {/* DsGrid를 container로 사용 */}\r\n                <DsGrid container spacing={2}>\r\n                    {/* DsGrid를 item으로 사용하고, xs, sm, md 등의 prop 전달 */}\r\n                    <DsGrid size={8}>\r\n                        <DsGridItemStyled>xs=8</DsGridItemStyled>\r\n                    </DsGrid>\r\n                    <DsGrid size={4}>\r\n                        <DsGridItemStyled>xs=4</DsGridItemStyled>\r\n                    </DsGrid>\r\n                    <DsGrid size={4}>\r\n                        <DsGridItemStyled>xs=4</DsGridItemStyled>\r\n                    </DsGrid>\r\n                    <DsGrid size={8}>\r\n                        <DsGridItemStyled>xs=8</DsGridItemStyled>\r\n                    </DsGrid>\r\n                </DsGrid>\r\n            </Box>\r\n\r\n            <Box sx={{ flexGrow: 1, mt: 4 }}>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                    다양한 크기의 DsGrid 아이템\r\n                </Typography>\r\n                <DsGrid container spacing={3}>\r\n                    <DsGrid size=\"grow\">\r\n                        <DsGridItemStyled>size=grow</DsGridItemStyled>\r\n                    </DsGrid>\r\n                    <DsGrid size={6}>\r\n                        <DsGridItemStyled>size=6</DsGridItemStyled>\r\n                    </DsGrid>\r\n                    <DsGrid size=\"grow\">\r\n                        <DsGridItemStyled>size=grow</DsGridItemStyled>\r\n                    </DsGrid>\r\n                </DsGrid>\r\n            </Box>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default DsGridPage;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nimport composeClasses from '@mui/utils/composeClasses';\nimport capitalize from '@mui/utils/capitalize';\nimport useThemePropsSystem from \"../useThemeProps/index.js\";\nimport systemStyled from \"../styled/index.js\";\nimport createTheme from \"../createTheme/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultTheme = createTheme();\nconst defaultCreateStyledComponent = systemStyled('div', {\n  name: 'MuiContainer',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];\n  }\n});\nconst useThemePropsDefault = inProps => useThemePropsSystem({\n  props: inProps,\n  name: 'MuiContainer',\n  defaultTheme\n});\nconst useUtilityClasses = (ownerState, componentName) => {\n  const getContainerUtilityClass = slot => {\n    return generateUtilityClass(componentName, slot);\n  };\n  const {\n    classes,\n    fixed,\n    disableGutters,\n    maxWidth\n  } = ownerState;\n  const slots = {\n    root: ['root', maxWidth && `maxWidth${capitalize(String(maxWidth))}`, fixed && 'fixed', disableGutters && 'disableGutters']\n  };\n  return composeClasses(slots, getContainerUtilityClass, classes);\n};\nexport default function createContainer(options = {}) {\n  const {\n    // This will allow adding custom styled fn (for example for custom sx style function)\n    createStyledComponent = defaultCreateStyledComponent,\n    useThemeProps = useThemePropsDefault,\n    componentName = 'MuiContainer'\n  } = options;\n  const ContainerRoot = createStyledComponent(({\n    theme,\n    ownerState\n  }) => ({\n    width: '100%',\n    marginLeft: 'auto',\n    boxSizing: 'border-box',\n    marginRight: 'auto',\n    ...(!ownerState.disableGutters && {\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      // @ts-ignore module augmentation fails if custom breakpoints are used\n      [theme.breakpoints.up('sm')]: {\n        paddingLeft: theme.spacing(3),\n        paddingRight: theme.spacing(3)\n      }\n    })\n  }), ({\n    theme,\n    ownerState\n  }) => ownerState.fixed && Object.keys(theme.breakpoints.values).reduce((acc, breakpointValueKey) => {\n    const breakpoint = breakpointValueKey;\n    const value = theme.breakpoints.values[breakpoint];\n    if (value !== 0) {\n      // @ts-ignore\n      acc[theme.breakpoints.up(breakpoint)] = {\n        maxWidth: `${value}${theme.breakpoints.unit}`\n      };\n    }\n    return acc;\n  }, {}), ({\n    theme,\n    ownerState\n  }) => ({\n    // @ts-ignore module augmentation fails if custom breakpoints are used\n    ...(ownerState.maxWidth === 'xs' && {\n      // @ts-ignore module augmentation fails if custom breakpoints are used\n      [theme.breakpoints.up('xs')]: {\n        // @ts-ignore module augmentation fails if custom breakpoints are used\n        maxWidth: Math.max(theme.breakpoints.values.xs, 444)\n      }\n    }),\n    ...(ownerState.maxWidth &&\n    // @ts-ignore module augmentation fails if custom breakpoints are used\n    ownerState.maxWidth !== 'xs' && {\n      // @ts-ignore module augmentation fails if custom breakpoints are used\n      [theme.breakpoints.up(ownerState.maxWidth)]: {\n        // @ts-ignore module augmentation fails if custom breakpoints are used\n        maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`\n      }\n    })\n  }));\n  const Container = /*#__PURE__*/React.forwardRef(function Container(inProps, ref) {\n    const props = useThemeProps(inProps);\n    const {\n      className,\n      component = 'div',\n      disableGutters = false,\n      fixed = false,\n      maxWidth = 'lg',\n      classes: classesProp,\n      ...other\n    } = props;\n    const ownerState = {\n      ...props,\n      component,\n      disableGutters,\n      fixed,\n      maxWidth\n    };\n\n    // @ts-ignore module augmentation fails if custom breakpoints are used\n    const classes = useUtilityClasses(ownerState, componentName);\n    return (\n      /*#__PURE__*/\n      // @ts-ignore theme is injected by the styled util\n      _jsx(ContainerRoot, {\n        as: component\n        // @ts-ignore module augmentation fails if custom breakpoints are used\n        ,\n        ownerState: ownerState,\n        className: clsx(classes.root, className),\n        ref: ref,\n        ...other\n      })\n    );\n  });\n  process.env.NODE_ENV !== \"production\" ? Container.propTypes /* remove-proptypes */ = {\n    children: PropTypes.node,\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n    disableGutters: PropTypes.bool,\n    fixed: PropTypes.bool,\n    maxWidth: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),\n    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n  } : void 0;\n  return Container;\n}","'use client';\n\nimport PropTypes from 'prop-types';\nimport { createContainer } from '@mui/system';\nimport capitalize from \"../utils/capitalize.js\";\nimport styled from \"../styles/styled.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nconst Container = createContainer({\n  createStyledComponent: styled('div', {\n    name: 'MuiContainer',\n    slot: 'Root',\n    overridesResolver: (props, styles) => {\n      const {\n        ownerState\n      } = props;\n      return [styles.root, styles[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];\n    }\n  }),\n  useThemeProps: inProps => useDefaultProps({\n    props: inProps,\n    name: 'MuiContainer'\n  })\n});\nprocess.env.NODE_ENV !== \"production\" ? Container.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n  /**\n   * Set the max-width to match the min-width of the current breakpoint.\n   * This is useful if you'd prefer to design for a fixed set of sizes\n   * instead of trying to accommodate a fully fluid viewport.\n   * It's fluid by default.\n   * @default false\n   */\n  fixed: PropTypes.bool,\n  /**\n   * Determine the max-width of the container.\n   * The container width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   * @default 'lg'\n   */\n  maxWidth: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Container;"],"names":["DsGridPage","_jsxs","Container","maxWidth","children","_jsx","Typography","variant","component","gutterBottom","Box","sx","flexGrow","DsGrid","container","spacing","size","DsGridItemStyled","mt","_excluded","defaultTheme","createTheme","defaultCreateStyledComponent","systemStyled","name","slot","overridesResolver","props","styles","ownerState","root","concat","capitalize","String","fixed","disableGutters","useThemePropsDefault","inProps","useThemePropsSystem","options","arguments","length","undefined","createStyledComponent","useThemeProps","componentName","ContainerRoot","_ref","theme","_objectSpread","width","marginLeft","boxSizing","marginRight","paddingLeft","paddingRight","breakpoints","up","_ref2","Object","keys","values","reduce","acc","breakpointValueKey","breakpoint","value","unit","_ref3","Math","max","xs","React","ref","className","classes","classesProp","other","_objectWithoutProperties","useUtilityClasses","slots","composeClasses","generateUtilityClass","as","clsx","createContainer","styled","useDefaultProps"],"sourceRoot":""}