{"version":3,"file":"static/js/456.118bea1e.chunk.js","mappings":"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","sources":["components/input/DsSlider.tsx","pages/SliderPage.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport Slider, { SliderProps as MuiSliderProps } from '@mui/material/Slider'; // SliderProps 임포트\r\n\r\n// DsSliderProps가 MuiSliderProps를 확장하도록 변경\r\n// DsSlider에서 특별히 다루거나 기본값을 설정하는 prop들은 Omit으로 제외\r\nexport interface DsSliderProps extends Omit<MuiSliderProps,\r\n    'value' | 'onChange' | 'min' | 'max' | 'step' | 'disabled' | 'aria-label' // 'aria-label'도 Omit\r\n> {\r\n    // 1. value 타입을 number | number[]로 확장\r\n    value: number | number[];\r\n    // onChange 타입은 MUI Slider와 일치하므로 그대로 사용 가능\r\n    onChange: (event: Event, newValue: number | number[], activeThumb: number) => void;\r\n    min?: number;\r\n    max?: number;\r\n    step?: number;\r\n    disabled?: boolean;\r\n    // 3. aria-label을 직접 prop으로 받도록 변경 (또는 ariaLabelledby)\r\n    'aria-label': string; // 필수 prop으로 변경하거나, 기본값을 유지할 수 있습니다.\r\n    // 필요하다면 다른 DsSlider만의 고유한 prop을 추가할 수 있습니다.\r\n}\r\n\r\nexport function DsSlider({\r\n                             value,\r\n                             onChange,\r\n                             min = 0,\r\n                             max = 100,\r\n                             step = 1,\r\n                             disabled = false,\r\n                             'aria-label': ariaLabel = 'Slider', // 기본값 설정\r\n                             ...rest // 나머지 MuiSliderProps를 받습니다.\r\n                         }: DsSliderProps) {\r\n    return (\r\n        <Slider\r\n            value={value}\r\n            onChange={onChange}\r\n            min={min}\r\n            max={max}\r\n            step={step}\r\n            disabled={disabled}\r\n            aria-label={ariaLabel} // 전달받은 aria-label 사용\r\n            {...rest} // 나머지 props 전달 (예: marks, orientation, size 등)\r\n        />\r\n    );\r\n}","// src/pages/SliderPage.tsx\r\n\r\nimport React, { useState } from 'react';\r\nimport { Stack, Typography } from '@mui/material';\r\nimport { DsSlider } from '../components/input/DsSlider'; // DsSlider 컴포넌트 가져오기\r\n\r\nconst SliderPage = () => {\r\n    // 1. 기본 단일 값 슬라이더 상태\r\n    const [singleValue, setSingleValue] = useState<number>(30);\r\n\r\n    // 2. 범위 슬라이더 (두 개의 핸들) 상태\r\n    const [rangeValue, setRangeValue] = useState<number[]>([20, 80]);\r\n\r\n    // 3. 커스텀 step 및 범위 슬라이더 상태\r\n    const [customStepValue, setCustomStepValue] = useState<number>(50);\r\n\r\n    // 4. 비활성화된 슬라이더 (값은 중요하지 않음, 보여주기용)\r\n    const [disabledValue, setDisabledValue] = useState<number>(60);\r\n\r\n    // 5. Marks가 있는 슬라이더를 위한 새로운 상태 추가\r\n    const [marksValue, setMarksValue] = useState<number>(40);\r\n\r\n\r\n    const handleSingleChange = (event: Event, newValue: number | number[]) => {\r\n        setSingleValue(newValue as number);\r\n    };\r\n\r\n    const handleRangeChange = (event: Event, newValue: number | number[]) => {\r\n        setRangeValue(newValue as number[]);\r\n    };\r\n\r\n    const handleCustomStepChange = (event: Event, newValue: number | number[]) => {\r\n        setCustomStepValue(newValue as number);\r\n    };\r\n\r\n    // 비활성화된 슬라이더는 onChange 핸들러가 호출되지 않지만, 형식상 추가\r\n    const handleDisabledChange = (event: Event, newValue: number | number[]) => {\r\n        // 이 핸들러는 호출되지 않습니다.\r\n        setDisabledValue(newValue as number);\r\n    };\r\n\r\n    // Marks가 있는 슬라이더를 위한 새로운 핸들러 추가\r\n    const handleMarksChange = (event: Event, newValue: number | number[]) => {\r\n        setMarksValue(newValue as number);\r\n    };\r\n\r\n\r\n    return (\r\n        <Stack spacing={4} sx={{ p: 3, maxWidth: '600px'}}>\r\n            <Typography variant=\"h1\" component=\"h1\" gutterBottom>\r\n                Slider\r\n            </Typography>\r\n\r\n            {/* 예시 1: 기본 단일 값 슬라이더 */}\r\n            <Stack spacing={1} sx={{ p: 2, border: '1px solid #e0e0e0' }}>\r\n                <Typography variant=\"h6\" component=\"h2\">\r\n                    기본 슬라이더\r\n                </Typography>\r\n                <DsSlider\r\n                    value={singleValue}\r\n                    onChange={handleSingleChange}\r\n                    aria-label=\"기본 볼륨 슬라이더\" // aria-label 제공\r\n                />\r\n                <Typography variant=\"body2\">선택된 값: {singleValue}</Typography>\r\n            </Stack>\r\n\r\n            {/* 예시 2: 범위 슬라이더 */}\r\n            <Stack spacing={1} sx={{ p: 2, border: '1px solid #e0e0e0' }}>\r\n                <Typography variant=\"h6\" component=\"h2\">\r\n                    범위 슬라이더 (Range)\r\n                </Typography>\r\n                <DsSlider\r\n                    value={rangeValue}\r\n                    onChange={handleRangeChange}\r\n                    aria-label=\"가격 범위 슬라이더\" // aria-label 제공\r\n                />\r\n                <Typography variant=\"body2\">선택된 범위: {rangeValue[0]} - {rangeValue[1]}</Typography>\r\n            </Stack>\r\n\r\n            {/* 예시 3: 커스텀 min, max, step 슬라이더 */}\r\n            <Stack spacing={1} sx={{ p: 2, border: '1px solid #e0e0e0' }}>\r\n                <Typography variant=\"h6\" component=\"h2\">\r\n                    커스텀 단계 (Min/Max/Step)\r\n                </Typography>\r\n                <DsSlider\r\n                    value={customStepValue}\r\n                    onChange={handleCustomStepChange}\r\n                    min={0}\r\n                    max={200}\r\n                    step={10}\r\n                    aria-label=\"커스텀 단계 슬라이더\" // aria-label 제공\r\n                />\r\n                <Typography variant=\"body2\">선택된 값: {customStepValue}</Typography>\r\n            </Stack>\r\n\r\n            {/* 예시 4: 비활성화된 슬라이더 */}\r\n            <Stack spacing={1} sx={{ p: 2, border: '1px solid #e0e0e0' }}>\r\n                <Typography variant=\"h6\" component=\"h2\">\r\n                    비활성화된 슬라이더\r\n                </Typography>\r\n                <DsSlider\r\n                    value={disabledValue}\r\n                    onChange={handleDisabledChange} // 실제로는 호출되지 않음\r\n                    disabled // disabled prop 사용\r\n                    aria-label=\"비활성화된 슬라이더\" // aria-label 제공\r\n                />\r\n                <Typography variant=\"body2\">현재 값 (비활성화됨): {disabledValue}</Typography>\r\n            </Stack>\r\n\r\n            {/* 추가: DsSlider의 다른 props (marks, orientation 등)도 테스트해볼 수 있습니다. */}\r\n            {/* 예시: Marks가 있는 슬라이더 */}\r\n            <Stack spacing={1} sx={{ p: 2, border: '1px solid #e0e0e0' }}>\r\n                <Typography variant=\"h6\" component=\"h2\">\r\n                    Marks가 있는 슬라이더\r\n                </Typography>\r\n                <DsSlider\r\n                    value={marksValue}\r\n                    onChange={handleMarksChange}\r\n                    aria-label=\"Marks 슬라이더\"\r\n                    step={10}\r\n                    marks // marks를 true로 설정하거나, marks 배열을 직접 전달할 수 있습니다.\r\n                    valueLabelDisplay=\"auto\" // 값 레이블 표시\r\n                />\r\n                <Typography variant=\"body2\">선택된 값: {marksValue}</Typography> {/* 새로운 상태 변수 표시 */}\r\n            </Stack>\r\n\r\n        </Stack>\r\n    );\r\n};\r\n\r\nexport default SliderPage;"],"names":["DsSlider","_ref","value","onChange","min","max","step","disabled","ariaLabel","rest","_objectWithoutProperties","_excluded","_jsx","Slider","_objectSpread","SliderPage","singleValue","setSingleValue","useState","rangeValue","setRangeValue","customStepValue","setCustomStepValue","disabledValue","setDisabledValue","marksValue","setMarksValue","_jsxs","Stack","spacing","sx","p","maxWidth","children","Typography","variant","component","gutterBottom","border","handleSingleChange","event","newValue","handleRangeChange","handleCustomStepChange","handleDisabledChange","handleMarksChange","marks","valueLabelDisplay"],"sourceRoot":""}