{"version":3,"file":"static/js/130.c1824ed8.chunk.js","mappings":"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","sources":["components/mui_x/datagrid/DsDataGrid.tsx","pages/DataGridPage.tsx"],"sourcesContent":["// src/components/mui_x/datagrid/DsDataGrid.tsx\r\n\r\nimport * as React from 'react';\r\nimport Box, { BoxProps } from '@mui/material/Box'; // Import BoxProps for sx\r\n// DataGrid 관련 타입 및 컴포넌트를 임포트합니다.\r\nimport { DataGrid, DataGridProps as MuiDataGridProps } from '@mui/x-data-grid'; // Renamed to avoid conflict if needed\r\n\r\n// DsDataGridProps 인터페이스를 정의합니다.\r\n// MUI의 DataGridProps를 확장하여 DataGrid가 받는 모든 prop을 그대로 받을 수 있게 합니다.\r\nexport interface DsDataGridProps extends MuiDataGridProps {\r\n    /**\r\n     * The system prop that allows defining system overrides as well as additional CSS styles.\r\n     * This will be applied to the wrapping Box component.\r\n     */\r\n    sx?: BoxProps['sx']; // Explicitly add sx for the Box wrapper\r\n    // 필요하다면 여기에 디자인 시스템에 특화된 prop을 추가할 수 있습니다.\r\n    // 예: defaultHeight?: number; // Box wrapper의 기본 높이를 설정하는 prop\r\n}\r\n\r\nexport function DsDataGrid({\r\n                               rows,\r\n                               columns,\r\n                               initialState,\r\n                               pageSizeOptions,\r\n                               checkboxSelection,\r\n                               disableRowSelectionOnClick,\r\n                               sx, // Now explicitly typed in DsDataGridProps\r\n                               ...restProps\r\n                           }: DsDataGridProps) {\r\n\r\n    const defaultInitialState = initialState ?? {\r\n        pagination: {\r\n            paginationModel: {\r\n                pageSize: 5,\r\n            },\r\n        },\r\n    };\r\n\r\n    const defaultPageSizeOptions = pageSizeOptions ?? [5];\r\n    const defaultCheckboxSelection = checkboxSelection ?? true;\r\n    const defaultDisableRowSelectionOnClick = disableRowSelectionOnClick ?? true;\r\n\r\n    const defaultBoxSx = { height: 400, width: '100%' };\r\n    const combinedBoxSx = sx ? { ...defaultBoxSx, ...sx } : defaultBoxSx;\r\n\r\n    return (\r\n        <Box sx={combinedBoxSx}>\r\n            <DataGrid\r\n                rows={rows}\r\n                columns={columns}\r\n                initialState={defaultInitialState}\r\n                pageSizeOptions={defaultPageSizeOptions}\r\n                checkboxSelection={defaultCheckboxSelection}\r\n                disableRowSelectionOnClick={defaultDisableRowSelectionOnClick}\r\n                {...restProps} // sx from restProps will be passed to DataGrid if not destructured earlier\r\n            />\r\n        </Box>\r\n    );\r\n}","// src/pages/DataGridPage.tsx\r\n\r\nimport React from 'react';\r\nimport { Stack, Typography, Box } from '@mui/material';\r\nimport { DsDataGrid } from '../components/mui_x/datagrid/DsDataGrid';\r\n// 사용자 정의 타입을 가져옵니다. 이 타입들이 실제 MUI X DataGrid와 호환되는지 확인이 중요합니다.\r\nimport type { GridValueGetterParams, GridColDef } from '../types/mui-grid';\r\n\r\n// 1. 행 데이터에 대한 인터페이스 정의\r\ninterface RowData {\r\n    id: number;\r\n    firstName: string | null; // firstName이 없을 수 있는 경우 null 허용\r\n    lastName: string;\r\n    age: number | null;      // age가 없을 수 있는 경우 null 허용\r\n}\r\n\r\n// 2. RowData 인터페이스를 GridColDef와 함께 사용\r\nconst columns: GridColDef<RowData>[] = [\r\n    { field: 'id', headerName: 'ID', width: 90 },\r\n    {\r\n        field: 'firstName',\r\n        headerName: '이름 (First name)',\r\n        width: 150,\r\n        editable: true,\r\n    },\r\n    {\r\n        field: 'lastName',\r\n        headerName: '성 (Last name)',\r\n        width: 150,\r\n        editable: true,\r\n    },\r\n    {\r\n        field: 'age',\r\n        headerName: '나이 (Age)',\r\n        type: 'number', // 사용자 정의 GridColDef에 'number' 타입이 GridColType으로 정의되어 있는지 확인\r\n        width: 110,\r\n        editable: true,\r\n        align: 'left', // 사용자 정의 GridColDef에 'align' 속성이 정의되어 있는지 확인\r\n        headerAlign: 'left', // 사용자 정의 GridColDef에 'headerAlign' 속성이 정의되어 있는지 확인\r\n    },\r\n    {\r\n        field: 'fullName',\r\n        headerName: '전체 이름 (Full name)',\r\n        description: '이 열은 valueGetter를 사용하며 정렬할 수 없습니다.',\r\n        sortable: false, // 사용자 정의 GridColDef에 'sortable' 속성이 정의되어 있는지 확인\r\n        width: 180,\r\n        valueGetter: (params: GridValueGetterParams<RowData>) => {\r\n            // params 객체와 params.row가 유효한지 확인하여 런타임 에러 방지\r\n            if (!params || typeof params.row === 'undefined') {\r\n                console.warn('DataGridPage: \"fullName\" 컬럼의 valueGetter에서 params 또는 params.row가 undefined입니다.', params);\r\n                return '정보 없음'; // 또는 빈 문자열 '' 등 적절한 기본값\r\n            }\r\n            // firstName이 null일 경우 빈 문자열로 처리\r\n            const firstName = params.row.firstName || '';\r\n            // lastName은 null을 허용하지 않지만, 일관성을 위해 빈 문자열 처리 (필요시)\r\n            const lastName = params.row.lastName || '';\r\n            return `${firstName} ${lastName}`.trim(); // 앞뒤 공백 제거\r\n        },\r\n    },\r\n];\r\n\r\n// 3. 행 데이터 배열에도 RowData 인터페이스를 사용하여 일관성 유지\r\nconst rows: RowData[] = [\r\n    { id: 1, lastName: '스노우', firstName: '존', age: 35 },\r\n    { id: 2, lastName: '래니스터', firstName: '세르세이', age: 42 },\r\n    { id: 3, lastName: '래니스터', firstName: '제이미', age: 42 },\r\n    { id: 4, lastName: '스타크', firstName: '아리아', age: 25 },\r\n    { id: 5, lastName: '타르가르옌', firstName: '대너리스', age: null },\r\n    { id: 6, lastName: '멜리산드레', firstName: null, age: 150 },\r\n    { id: 7, lastName: '클리포드', firstName: '페라라', age: 44 },\r\n    { id: 8, lastName: '프란시스', firstName: '로시니', age: 36 },\r\n    { id: 9, lastName: '록시', firstName: '하비', age: 65 },\r\n];\r\n\r\nconst DataGridPage = () => {\r\n    return (\r\n        <Stack spacing={4} sx={{ p: 3 }}>\r\n            <Typography variant=\"h4\" component=\"h1\" gutterBottom>DataGrid 컴포넌트\r\n            </Typography>\r\n\r\n            <Box>\r\n                <Typography variant=\"h6\" component=\"h2\" gutterBottom>\r\n                    기본 DsDataGrid 예시\r\n                </Typography>\r\n                <DsDataGrid\r\n                    rows={rows}\r\n                    columns={columns}\r\n                />\r\n            </Box>\r\n\r\n            <Box>\r\n                <Typography variant=\"h6\" component=\"h2\" gutterBottom>\r\n                    페이지 크기 옵션 변경 및 자동 높이 조절 예시\r\n                </Typography>\r\n                <DsDataGrid\r\n                    rows={rows}\r\n                    columns={columns}\r\n                    pageSizeOptions={[5, 10, 20]}\r\n                    initialState={{\r\n                        pagination: {\r\n                            paginationModel: {\r\n                                pageSize: 10,\r\n                            },\r\n                        },\r\n                    }}\r\n                    autoHeight\r\n                    checkboxSelection={false}\r\n                />\r\n            </Box>\r\n        </Stack>\r\n    );\r\n};\r\n\r\nexport default DataGridPage;"],"names":["DsDataGrid","_ref","rows","columns","initialState","pageSizeOptions","checkboxSelection","disableRowSelectionOnClick","sx","restProps","_objectWithoutProperties","_excluded","defaultInitialState","pagination","paginationModel","pageSize","defaultPageSizeOptions","defaultCheckboxSelection","defaultDisableRowSelectionOnClick","defaultBoxSx","height","width","combinedBoxSx","_objectSpread","_jsx","Box","children","DataGrid","field","headerName","editable","type","align","headerAlign","description","sortable","valueGetter","params","row","console","warn","firstName","lastName","concat","trim","id","age","DataGridPage","_jsxs","Stack","spacing","p","Typography","variant","component","gutterBottom","autoHeight"],"sourceRoot":""}