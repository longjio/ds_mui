{"version":3,"file":"static/js/629.cea96b85.chunk.js","mappings":"0RAEO,SAASA,EAAyBC,GACvC,OAAOC,EAAAA,EAAAA,IAAqB,eAAgBD,EAC9C,EACyBE,EAAAA,EAAAA,GAAuB,eAAgB,CAAC,S,uBCLpD,MAAAC,EAAA,0XAoBPC,EAAmB,CACvBC,SAAUC,EAAAA,EACVC,OAAQC,EAAAA,EACRC,SAAUC,EAAAA,GAWNC,GAAgBC,EAAAA,EAAAA,IAAOC,EAAAA,EAAa,CACxCC,KAAM,eACNd,KAAM,QAFcY,CAGnB,CAAC,GAkaJ,EAhY+BG,EAAAA,YAAiB,SAAmBC,EAASC,GAC1E,MAAMC,GAAQC,EAAAA,EAAAA,GAAgB,CAC5BD,MAAOF,EACPF,KAAM,kBAEF,aACJM,EAAY,UACZC,GAAY,EAAK,SACjBC,EAAQ,UACRC,EAAS,MACTC,EAAQ,UAAS,aACjBC,EAAY,SACZC,GAAW,EAAK,MAChBC,GAAQ,EACRC,oBAAqBC,EAAuB,UAC5CC,GAAY,EAAK,WACjBC,EACAC,GAAIC,EACJC,gBAAiBC,EACjBC,WAAYC,EACZC,WAAYC,EAAc,SAC1BC,EAAQ,MACRC,EAAK,QACLC,EAAO,QACPC,EAAO,UACPC,GAAY,EAAK,KACjB9B,EAAI,OACJ+B,EAAM,SACNC,EAAQ,QACRC,EAAO,YACPC,EAAW,SACXC,GAAW,EAAK,KAChBC,EAAI,OACJC,GAAS,EACTC,YAAaC,EAAe,MAC5BC,EAAQ,CAAC,EAAC,UACVC,EAAY,CAAC,EAAC,KACdC,EAAI,MACJC,EAAK,QACLC,EAAU,YAERxC,EADCyC,GAAKC,EAAAA,EAAAA,GACN1C,EAAKf,GACH0D,GAAUC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACX5C,GAAK,IACRG,YACAG,QACAE,WACAC,QACAG,YACAc,YACAK,WACAE,SACAO,YAEIK,GApGkBF,KACxB,MAAM,QACJE,GACEF,EAIJ,OAAOG,EAAAA,EAAAA,GAHO,CACZC,KAAM,CAAC,SAEoBlE,EAA0BgE,IA6FvCG,CAAkBL,GAMlC,MAAM7B,IAAKmC,EAAAA,EAAAA,GAAMlC,GACXmC,GAAerC,GAAcC,GAAK,GAAHqC,OAAMrC,GAAE,qBAAiBsC,EACxDC,GAAe9B,GAAST,GAAK,GAAHqC,OAAMrC,GAAE,eAAWsC,EAC7CE,GAAiBpE,EAAiBsD,GAClCe,GAAyB,CAC7BnB,QACAC,WAASO,EAAAA,EAAAA,GAAA,CACPY,MAAOnC,EACPoC,WAAYxC,EACZyC,UAAWvC,EACXwC,eAAgBhD,EAChBsB,OAAQE,GACLE,IAGDuB,GAAuB,CAAC,EACxBC,GAAsBN,GAAuBlB,UAAUoB,WAC7C,aAAZjB,IACEqB,IAA6D,qBAA/BA,GAAoBC,SACpDF,GAAqBG,QAAUF,GAAoBC,QAErDF,GAAqBrC,MAAQA,GAE3BU,IAEGE,GAAoBA,EAAgB6B,SACvCJ,GAAqB9C,QAAKsC,GAE5BQ,GAAqB,yBAAsBR,GAE7C,MAAOa,GAAUC,KAAaC,EAAAA,EAAAA,GAAQ,OAAQ,CAC5CC,YAAa3E,EACb4E,4BAA4B,EAC5Bd,wBAAsBX,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjBW,IACAd,GAELE,aACAtC,WAAWiE,EAAAA,EAAAA,GAAKzB,GAAQE,KAAM1C,GAC9BN,MACAwE,gBAAiB,CACf/D,WACAC,QACAG,YACAmB,WACAzB,QACAkC,cAGGgC,GAAWtD,KAAciD,EAAAA,EAAAA,GAAQ,QAAS,CAC/CC,YAAad,GACbC,0BACAgB,gBAAiBX,GACjBjB,gBAEK8B,GAAgBC,KAAmBP,EAAAA,EAAAA,GAAQ,aAAc,CAC9DC,YAAaO,EAAAA,EACbpB,0BACAZ,gBAEKiC,GAAeC,KAAkBV,EAAAA,EAAAA,GAAQ,YAAa,CAC3DC,YAAa,QACbb,0BACAZ,gBAEKmC,GAAoBC,KAAuBZ,EAAAA,EAAAA,GAAQ,iBAAkB,CAC1EC,YAAaY,EAAAA,EACbzB,0BACAZ,gBAEKsC,GAAYC,KAAef,EAAAA,EAAAA,GAAQ,SAAU,CAClDC,YAAae,EAAAA,EACb5B,0BACAZ,eAEIyC,IAA4BC,EAAAA,EAAAA,KAAKb,IAAS5B,EAAAA,EAAAA,GAAA,CAC9C,mBAAoBM,GACpBhD,aAAcA,EACdC,UAAWA,EACXI,aAAcA,EACdK,UAAWA,EACXc,UAAWA,EACX9B,KAAMA,EACNoC,KAAMA,EACNR,QAASA,EACTC,QAASA,EACTa,KAAMA,EACNC,MAAOA,EACPzB,GAAIA,GACJQ,SAAUA,EACVK,OAAQA,EACRC,SAAUA,EACVC,QAASA,EACTC,YAAaA,EACbZ,WAAY2D,GACZzC,MAAO,CACLoB,MAAOpB,EAAMsB,UAAYkB,QAAgBxB,IAExClC,KAEL,OAAoBoE,EAAAA,EAAAA,MAAMrB,IAAQrB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC7BsB,IAAS,IACZ9D,SAAU,CAAU,MAATmB,GAA2B,KAAVA,IAA6B8D,EAAAA,EAAAA,KAAKZ,IAAc7B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAC1E2C,QAASzE,GACTA,GAAIuC,IACDqB,IAAe,IAClBtE,SAAUmB,KACRU,GAAsBoD,EAAAA,EAAAA,KAAKJ,IAAUrC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACvC,mBAAoBM,GACpBpC,GAAIA,GACJ0E,QAASnC,GACTd,MAAOA,EACPiB,MAAO4B,IACJF,IAAW,IACd9E,SAAUA,KACPgF,GAAcvE,IAA2BwE,EAAAA,EAAAA,KAAKP,IAAkBlC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACnE9B,GAAIoC,IACD6B,IAAmB,IACtB3E,SAAUS,QAGhB,G,yDCxPA,SAAe4E,EAAAA,EAAAA,IAA2BJ,EAAAA,EAAAA,KAAK,OAAQ,CACrDK,EAAG,yKACD,W,0LC6BJ,SAASC,EAAS3F,GACd,MAAM,SAAEI,EAAQ,MAAEmC,EAAK,MAAEqD,GAAoB5F,EAAVyC,GAAKC,EAAAA,EAAAA,GAAK1C,EAAKf,GAElD,OACIoG,EAAAA,EAAAA,KAAA,OAAAzC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACIiD,KAAK,WACLC,OAAQvD,IAAUqD,EAClB9E,GAAE,eAAAqC,OAAiByC,GACnB,4BAAAzC,OAA2ByC,IACvBnD,GAAK,IAAArC,SAERmC,IAAUqD,IAASP,EAAAA,EAAAA,KAACU,EAAAA,EAAG,CAACC,GAAI,CAAEC,EAAG,GAAI7F,SAAEA,MAGpD,CAmBA,MAqCA,EArCsC8F,IAAyB,IAAxB,KAAEC,GAAgBD,EAAPlG,GAAK0C,EAAAA,EAAAA,GAAAwD,EAAAE,GACnD,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,GAM3C,OACIjB,EAAAA,EAAAA,MAACS,EAAAA,EAAG,CAACC,GAAI,CAAEQ,MAAO,QAASpG,SAAA,EACvBiF,EAAAA,EAAAA,KAACU,EAAAA,EAAG,CAACC,GAAI,CAAES,aAAc,EAAGC,YAAa,WAAYtG,UACjDiF,EAAAA,EAAAA,KAACsB,EAAAA,GAAI/D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACDL,MAAO8D,EACPzE,SATKgF,CAACC,EAA6BC,KAC/CR,EAAaQ,IASD,aAAW,wBACP9G,GAAK,IAAAI,SAER+F,EAAKY,KAAI,CAACC,EAAKpB,KACZP,EAAAA,EAAAA,KAAC4B,EAAAA,GAAGrE,EAAAA,EAAAA,GAAA,CAEArB,MAAOyF,EAAIzF,MACXf,SAAUwG,EAAIxG,SACd0G,KAAMF,EAAIE,KACVC,aAAa,SApCzC,SAAmBvB,GACf,MAAO,CACH9E,GAAG,UAADqC,OAAYyC,GACd,gBAAgB,eAADzC,OAAiByC,GAExC,CAgCgCwB,CAAUxB,IALToB,EAAIzF,cAUxB4E,EAAKY,KAAI,CAACC,EAAKpB,KACZP,EAAAA,EAAAA,KAACM,EAAQ,CAAiBpD,MAAO8D,EAAWT,MAAOA,EAAMxF,SACpD4G,EAAIK,SADML,EAAIzF,a,cC7FnC,SAAekE,EAAAA,EAAAA,IAA2BJ,EAAAA,EAAAA,KAAK,OAAQ,CACrDK,EAAG,4OACD,S,cCFJ,SAAeD,EAAAA,EAAAA,IAA2BJ,EAAAA,EAAAA,KAAK,OAAQ,CACrDK,EAAG,oRACD,aC+FJ,EA5FiB4B,KAEb,MAAMC,EAAuB,CACzB,CACIhG,MAAO,WACP8F,SAAShC,EAAAA,EAAAA,KAACmC,EAAAA,EAAU,CAAApH,SAAC,uCAEzB,CACImB,MAAO,WACP8F,SAAShC,EAAAA,EAAAA,KAACmC,EAAAA,EAAU,CAAApH,SAAC,mDAEzB,CACImB,MAAO,aACP8F,SACI/B,EAAAA,EAAAA,MAACS,EAAAA,EAAG,CAAA3F,SAAA,EACAiF,EAAAA,EAAAA,KAACmC,EAAAA,EAAU,CAAApH,SAAC,4DACZiF,EAAAA,EAAAA,KAACoC,EAAAA,EAAS,CAAClG,MAAM,YAAYiB,QAAQ,WAAW5B,WAAS,EAAC8G,OAAO,eAI7E,CACInG,MAAO,gBACP8F,QAAS,2BACT7G,UAAU,IAKZmH,EAAsB,CACxB,CAAEpG,MAAO,UAAW8F,QAAS,uBAAwBH,MAAM7B,EAAAA,EAAAA,KAACuC,EAAS,KACrE,CAAErG,MAAO,YAAa8F,QAAS,oBAAqBH,MAAM7B,EAAAA,EAAAA,KAACwC,EAAAA,EAAY,KACvE,CAAEtG,MAAO,SAAU8F,QAAS,wBAAyBH,MAAM7B,EAAAA,EAAAA,KAACyC,EAAa,MAc7E,OACIxC,EAAAA,EAAAA,MAACS,EAAAA,EAAG,CAACC,GAAI,CAAEC,EAAG,GAAI7F,SAAA,EACdiF,EAAAA,EAAAA,KAACmC,EAAAA,EAAU,CAAChF,QAAQ,KAAKuF,cAAY,EAAA3H,SAAC,UAGtCiF,EAAAA,EAAAA,KAACmC,EAAAA,EAAU,CAAClH,MAAM,iBAAiB0F,GAAI,CAAEgC,GAAI,GAAI5H,SAAC,+LAKlDiF,EAAAA,EAAAA,KAACmC,EAAAA,EAAU,CAAChF,QAAQ,KAAKuF,cAAY,EAAC/B,GAAI,CAAEiC,GAAI,GAAI7H,SAAC,gBAGrDiF,EAAAA,EAAAA,KAAC6C,EAAM,CAAC/B,KAAMoB,KAGdlC,EAAAA,EAAAA,KAACmC,EAAAA,EAAU,CAAChF,QAAQ,KAAKuF,cAAY,EAAC/B,GAAI,CAAEiC,GAAI,GAAI7H,SAAC,gCAGrDiF,EAAAA,EAAAA,KAAC6C,EAAM,CAAC/B,KAAMoB,EAAUY,MAAM,EAAG,GAAI3F,QAAQ,YAAY4F,UAAQ,KAGjE/C,EAAAA,EAAAA,KAACmC,EAAAA,EAAU,CAAChF,QAAQ,KAAKuF,cAAY,EAAC/B,GAAI,CAAEiC,GAAI,GAAI7H,SAAC,eAGrDiF,EAAAA,EAAAA,KAAC6C,EAAM,CAAC/B,KAAMwB,KAGdtC,EAAAA,EAAAA,KAACmC,EAAAA,EAAU,CAAChF,QAAQ,KAAKuF,cAAY,EAAC/B,GAAI,CAAEiC,GAAI,GAAI7H,SAAC,qBAGrDiF,EAAAA,EAAAA,KAACmC,EAAAA,EAAU,CAAClH,MAAM,iBAAiB0F,GAAI,CAAEgC,GAAI,GAAI5H,SAAC,iLAGlDiF,EAAAA,EAAAA,KAACU,EAAAA,EAAG,CAACC,GAAI,CAAEqC,SAAU,CAAEC,GAAI,IAAKC,GAAI,MAAOnI,UACvCiF,EAAAA,EAAAA,KAAC6C,EAAM,CACH/B,KA9CkB,CAC9B,CAAE5E,MAAO,WAAY8F,QAAS,wBAC9B,CAAE9F,MAAO,WAAY8F,QAAS,wBAC9B,CAAE9F,MAAO,aAAc8F,QAAS,0BAChC,CAAE9F,MAAO,YAAa8F,QAAS,yBAC/B,CAAE9F,MAAO,YAAa8F,QAAS,yBAC/B,CAAE9F,MAAO,WAAY8F,QAAS,wBAC9B,CAAE9F,MAAO,aAAc8F,QAAS,2BAwCpB7E,QAAQ,aACRgG,eAAa,EACbC,0BAAwB,EACxB,aAAW,uC","sources":["../node_modules/@mui/material/esm/TextField/textFieldClasses.js","../node_modules/@mui/material/esm/TextField/TextField.js","../node_modules/@mui/icons-material/esm/Favorite.js","components/navigation/DsTabs.tsx","../node_modules/@mui/icons-material/esm/Phone.js","../node_modules/@mui/icons-material/esm/PersonPin.js","pages/TabsPage.tsx"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTextFieldUtilityClass(slot) {\n  return generateUtilityClass('MuiTextField', slot);\n}\nconst textFieldClasses = generateUtilityClasses('MuiTextField', ['root']);\nexport default textFieldClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport useId from '@mui/utils/useId';\nimport refType from '@mui/utils/refType';\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport Input from \"../Input/index.js\";\nimport FilledInput from \"../FilledInput/index.js\";\nimport OutlinedInput from \"../OutlinedInput/index.js\";\nimport InputLabel from \"../InputLabel/index.js\";\nimport FormControl from \"../FormControl/index.js\";\nimport FormHelperText from \"../FormHelperText/index.js\";\nimport Select from \"../Select/index.js\";\nimport { getTextFieldUtilityClass } from \"./textFieldClasses.js\";\nimport useSlot from \"../utils/useSlot.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst variantComponent = {\n  standard: Input,\n  filled: FilledInput,\n  outlined: OutlinedInput\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTextFieldUtilityClass, classes);\n};\nconst TextFieldRoot = styled(FormControl, {\n  name: 'MuiTextField',\n  slot: 'Root'\n})({});\n\n/**\n * The `TextField` is a convenience wrapper for the most common cases (80%).\n * It cannot be all things to all people, otherwise the API would grow out of control.\n *\n * ## Advanced Configuration\n *\n * It's important to understand that the text field is a simple abstraction\n * on top of the following components:\n *\n * - [FormControl](/material-ui/api/form-control/)\n * - [InputLabel](/material-ui/api/input-label/)\n * - [FilledInput](/material-ui/api/filled-input/)\n * - [OutlinedInput](/material-ui/api/outlined-input/)\n * - [Input](/material-ui/api/input/)\n * - [FormHelperText](/material-ui/api/form-helper-text/)\n *\n * If you wish to alter the props applied to the `input` element, you can do so as follows:\n *\n * ```jsx\n * const inputProps = {\n *   step: 300,\n * };\n *\n * return <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n * ```\n *\n * For advanced cases, please look at the source of TextField by clicking on the\n * \"Edit this page\" button above. Consider either:\n *\n * - using the upper case props for passing values directly to the components\n * - using the underlying components directly as shown in the demos\n */\nconst TextField = /*#__PURE__*/React.forwardRef(function TextField(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTextField'\n  });\n  const {\n    autoComplete,\n    autoFocus = false,\n    children,\n    className,\n    color = 'primary',\n    defaultValue,\n    disabled = false,\n    error = false,\n    FormHelperTextProps: FormHelperTextPropsProp,\n    fullWidth = false,\n    helperText,\n    id: idOverride,\n    InputLabelProps: InputLabelPropsProp,\n    inputProps: inputPropsProp,\n    InputProps: InputPropsProp,\n    inputRef,\n    label,\n    maxRows,\n    minRows,\n    multiline = false,\n    name,\n    onBlur,\n    onChange,\n    onFocus,\n    placeholder,\n    required = false,\n    rows,\n    select = false,\n    SelectProps: SelectPropsProp,\n    slots = {},\n    slotProps = {},\n    type,\n    value,\n    variant = 'outlined',\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    autoFocus,\n    color,\n    disabled,\n    error,\n    fullWidth,\n    multiline,\n    required,\n    select,\n    variant\n  };\n  const classes = useUtilityClasses(ownerState);\n  if (process.env.NODE_ENV !== 'production') {\n    if (select && !children) {\n      console.error('MUI: `children` must be passed when using the `TextField` component with `select`.');\n    }\n  }\n  const id = useId(idOverride);\n  const helperTextId = helperText && id ? `${id}-helper-text` : undefined;\n  const inputLabelId = label && id ? `${id}-label` : undefined;\n  const InputComponent = variantComponent[variant];\n  const externalForwardedProps = {\n    slots,\n    slotProps: {\n      input: InputPropsProp,\n      inputLabel: InputLabelPropsProp,\n      htmlInput: inputPropsProp,\n      formHelperText: FormHelperTextPropsProp,\n      select: SelectPropsProp,\n      ...slotProps\n    }\n  };\n  const inputAdditionalProps = {};\n  const inputLabelSlotProps = externalForwardedProps.slotProps.inputLabel;\n  if (variant === 'outlined') {\n    if (inputLabelSlotProps && typeof inputLabelSlotProps.shrink !== 'undefined') {\n      inputAdditionalProps.notched = inputLabelSlotProps.shrink;\n    }\n    inputAdditionalProps.label = label;\n  }\n  if (select) {\n    // unset defaults from textbox inputs\n    if (!SelectPropsProp || !SelectPropsProp.native) {\n      inputAdditionalProps.id = undefined;\n    }\n    inputAdditionalProps['aria-describedby'] = undefined;\n  }\n  const [RootSlot, rootProps] = useSlot('root', {\n    elementType: TextFieldRoot,\n    shouldForwardComponentProp: true,\n    externalForwardedProps: {\n      ...externalForwardedProps,\n      ...other\n    },\n    ownerState,\n    className: clsx(classes.root, className),\n    ref,\n    additionalProps: {\n      disabled,\n      error,\n      fullWidth,\n      required,\n      color,\n      variant\n    }\n  });\n  const [InputSlot, inputProps] = useSlot('input', {\n    elementType: InputComponent,\n    externalForwardedProps,\n    additionalProps: inputAdditionalProps,\n    ownerState\n  });\n  const [InputLabelSlot, inputLabelProps] = useSlot('inputLabel', {\n    elementType: InputLabel,\n    externalForwardedProps,\n    ownerState\n  });\n  const [HtmlInputSlot, htmlInputProps] = useSlot('htmlInput', {\n    elementType: 'input',\n    externalForwardedProps,\n    ownerState\n  });\n  const [FormHelperTextSlot, formHelperTextProps] = useSlot('formHelperText', {\n    elementType: FormHelperText,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SelectSlot, selectProps] = useSlot('select', {\n    elementType: Select,\n    externalForwardedProps,\n    ownerState\n  });\n  const InputElement = /*#__PURE__*/_jsx(InputSlot, {\n    \"aria-describedby\": helperTextId,\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    defaultValue: defaultValue,\n    fullWidth: fullWidth,\n    multiline: multiline,\n    name: name,\n    rows: rows,\n    maxRows: maxRows,\n    minRows: minRows,\n    type: type,\n    value: value,\n    id: id,\n    inputRef: inputRef,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    placeholder: placeholder,\n    inputProps: htmlInputProps,\n    slots: {\n      input: slots.htmlInput ? HtmlInputSlot : undefined\n    },\n    ...inputProps\n  });\n  return /*#__PURE__*/_jsxs(RootSlot, {\n    ...rootProps,\n    children: [label != null && label !== '' && /*#__PURE__*/_jsx(InputLabelSlot, {\n      htmlFor: id,\n      id: inputLabelId,\n      ...inputLabelProps,\n      children: label\n    }), select ? /*#__PURE__*/_jsx(SelectSlot, {\n      \"aria-describedby\": helperTextId,\n      id: id,\n      labelId: inputLabelId,\n      value: value,\n      input: InputElement,\n      ...selectProps,\n      children: children\n    }) : InputElement, helperText && /*#__PURE__*/_jsx(FormHelperTextSlot, {\n      id: helperTextId,\n      ...formHelperTextProps,\n      children: helperText\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TextField.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the label is displayed in an error state.\n   * @default false\n   */\n  error: PropTypes.bool,\n  /**\n   * Props applied to the [`FormHelperText`](https://mui.com/material-ui/api/form-helper-text/) element.\n   * @deprecated Use `slotProps.formHelperText` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  FormHelperTextProps: PropTypes.object,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The helper text content.\n   */\n  helperText: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   * Use this prop to make `label` and `helperText` accessible for screen readers.\n   */\n  id: PropTypes.string,\n  /**\n   * Props applied to the [`InputLabel`](https://mui.com/material-ui/api/input-label/) element.\n   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.\n   * @deprecated Use `slotProps.inputLabel` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  InputLabelProps: PropTypes.object,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#attributes) applied to the `input` element.\n   * @deprecated Use `slotProps.htmlInput` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](https://mui.com/material-ui/api/filled-input/),\n   * [`OutlinedInput`](https://mui.com/material-ui/api/outlined-input/) or [`Input`](https://mui.com/material-ui/api/input/)\n   * component depending on the `variant` prop value.\n   * @deprecated Use `slotProps.input` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  InputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   * @default 'none'\n   */\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Minimum number of rows to display when multiline option is set to true.\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * If `true`, a `textarea` element is rendered instead of an input.\n   * @default false\n   */\n  multiline: PropTypes.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * The short hint displayed in the `input` before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n  /**\n   * If `true`, the label is displayed as required and the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Render a [`Select`](https://mui.com/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.\n   * If this option is set you must pass the options of the select as children.\n   * @default false\n   */\n  select: PropTypes.bool,\n  /**\n   * Props applied to the [`Select`](https://mui.com/material-ui/api/select/) element.\n   * @deprecated Use `slotProps.select` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  SelectProps: PropTypes.object,\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    formHelperText: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    htmlInput: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    inputLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    select: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    formHelperText: PropTypes.elementType,\n    htmlInput: PropTypes.elementType,\n    input: PropTypes.elementType,\n    inputLabel: PropTypes.elementType,\n    root: PropTypes.elementType,\n    select: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#input_types).\n   */\n  type: PropTypes /* @typescript-to-proptypes-ignore */.string,\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any,\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default TextField;","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"m12 21.35-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54z\"\n}), 'Favorite');","import React, { useState } from 'react';\r\nimport {\r\n    Box,\r\n    Tabs,\r\n    Tab,\r\n    Typography,\r\n    TabsProps as MuiTabsProps,\r\n} from '@mui/material';\r\n\r\n// 각 탭 아이템의 데이터 타입을 정의합니다.\r\nexport interface TabItem {\r\n    label: string;\r\n    content: React.ReactNode;\r\n    disabled?: boolean;\r\n    icon?: React.ReactElement; // 1. 아이콘 속성을 옵셔널하게 추가합니다.\r\n}\r\n\r\n// DsTabs 컴포넌트가 받을 props 타입을 정의합니다.\r\ninterface DsTabsProps extends Omit<MuiTabsProps, 'value' | 'onChange' | 'children'> {\r\n    /** 탭의 라벨과 컨텐츠를 담은 배열 */\r\n    tabs: TabItem[];\r\n}\r\n\r\n// --- Helper Components & Functions (내부 구현) ---\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: number;\r\n    value: number;\r\n}\r\n\r\n/**\r\n * 특정 탭이 활성화되었을 때 컨텐츠를 보여주는 패널 컴포넌트입니다.\r\n * 이 컴포넌트는 DsTabs 내부에서만 사용됩니다.\r\n */\r\nfunction TabPanel(props: TabPanelProps) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`ds-tabpanel-${index}`}\r\n            aria-labelledby={`ds-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\r\n        </div>\r\n    );\r\n}\r\n\r\n/**\r\n * 웹 접근성(a11y)을 위한 props를 생성하는 헬퍼 함수입니다.\r\n */\r\nfunction a11yProps(index: number) {\r\n    return {\r\n        id: `ds-tab-${index}`,\r\n        'aria-controls': `ds-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\n\r\n// --- Main DsTabs Component ---\r\n\r\n/**\r\n * 탭 데이터를 배열로 받아 탭 인터페이스를 렌더링하는 재사용 가능한 컴포넌트입니다.\r\n * 내부적으로 활성 탭 상태와 컨텐츠 패널 표시를 관리합니다.\r\n */\r\nconst DsTabs: React.FC<DsTabsProps> = ({ tabs, ...props }) => {\r\n    const [activeTab, setActiveTab] = useState(0);\r\n\r\n    const handleChange = (event: React.SyntheticEvent, newValue: number) => {\r\n        setActiveTab(newValue);\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ width: '100%' }}>\r\n            <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                <Tabs\r\n                    value={activeTab}\r\n                    onChange={handleChange}\r\n                    aria-label=\"Dynamic tabs example\"\r\n                    {...props} // variant, centered 등 MUI Tabs의 모든 props를 지원\r\n                >\r\n                    {tabs.map((tab, index) => (\r\n                        <Tab\r\n                            key={tab.label}\r\n                            label={tab.label}\r\n                            disabled={tab.disabled}\r\n                            icon={tab.icon} // 2. icon prop을 Tab 컴포넌트에 전달합니다.\r\n                            iconPosition=\"start\" // 3. 아이콘이 텍스트 앞에 오도록 위치를 지정합니다.\r\n                            {...a11yProps(index)}\r\n                        />\r\n                    ))}\r\n                </Tabs>\r\n            </Box>\r\n            {tabs.map((tab, index) => (\r\n                <TabPanel key={tab.label} value={activeTab} index={index}>\r\n                    {tab.content}\r\n                </TabPanel>\r\n            ))}\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default DsTabs;","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02z\"\n}), 'Phone');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2c-4.97 0-9 4.03-9 9 0 4.17 2.84 7.67 6.69 8.69L12 22l2.31-2.31C18.16 18.67 21 15.17 21 11c0-4.97-4.03-9-9-9m0 2c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3m0 14.3c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22\"\n}), 'PersonPin');","import React from 'react';\r\nimport { Box, Typography, TextField } from '@mui/material';\r\nimport DsTabs, { TabItem } from '../components/navigation/DsTabs';\r\n\r\n// 아이콘 import\r\nimport PhoneIcon from '@mui/icons-material/Phone';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport PersonPinIcon from '@mui/icons-material/PersonPin';\r\n\r\nconst TabsPage = () => {\r\n    // 1. 기본 탭에 전달할 데이터 배열\r\n    const basicTabs: TabItem[] = [\r\n        {\r\n            label: 'Item One',\r\n            content: <Typography>This is the content for Item One.</Typography>,\r\n        },\r\n        {\r\n            label: 'Item Two',\r\n            content: <Typography>Here you can find information about Item Two.</Typography>,\r\n        },\r\n        {\r\n            label: 'Item Three',\r\n            content: (\r\n                <Box>\r\n                    <Typography>Item Three can have more complex content, like a form.</Typography>\r\n                    <TextField label=\"Your Name\" variant=\"outlined\" fullWidth margin=\"normal\" />\r\n                </Box>\r\n            ),\r\n        },\r\n        {\r\n            label: 'Disabled Item',\r\n            content: 'You should not see this.',\r\n            disabled: true,\r\n        },\r\n    ];\r\n\r\n    // 2. 아이콘 탭에 전달할 데이터 배열\r\n    const iconTabs: TabItem[] = [\r\n        { label: 'Recents', content: 'Recent calls content', icon: <PhoneIcon /> },\r\n        { label: 'Favorites', content: 'Favorites content', icon: <FavoriteIcon /> },\r\n        { label: 'Nearby', content: 'Nearby places content', icon: <PersonPinIcon /> },\r\n    ];\r\n\r\n    // 3. 스크롤 탭에 전달할 데이터 배열 (새로 추가)\r\n    const scrollableTabs: TabItem[] = [\r\n        { label: 'Item One', content: 'Content for Item One' },\r\n        { label: 'Item Two', content: 'Content for Item Two' },\r\n        { label: 'Item Three', content: 'Content for Item Three' },\r\n        { label: 'Item Four', content: 'Content for Item Four' },\r\n        { label: 'Item Five', content: 'Content for Item Five' },\r\n        { label: 'Item Six', content: 'Content for Item Six' },\r\n        { label: 'Item Seven', content: 'Content for Item Seven' },\r\n    ];\r\n\r\n    return (\r\n        <Box sx={{ p: 3 }}>\r\n            <Typography variant=\"h4\" gutterBottom>\r\n                Tabs\r\n            </Typography>\r\n            <Typography color=\"text.secondary\" sx={{ mb: 4 }}>\r\n                Tabs는 관련된 컨텐츠 그룹을 탐색하고 전환할 수 있게 해주는 UI 패턴입니다.\r\n            </Typography>\r\n\r\n            {/* --- 예제 1: 기본 탭 --- */}\r\n            <Typography variant=\"h6\" gutterBottom sx={{ mt: 4 }}>\r\n                Basic Tabs\r\n            </Typography>\r\n            <DsTabs tabs={basicTabs} />\r\n\r\n            {/* --- 예제 2: 가득 찬 너비의 탭 (Centered) --- */}\r\n            <Typography variant=\"h6\" gutterBottom sx={{ mt: 6 }}>\r\n                Full Width & Centered Tabs\r\n            </Typography>\r\n            <DsTabs tabs={basicTabs.slice(0, 3)} variant=\"fullWidth\" centered />\r\n\r\n            {/* --- 예제 3: 아이콘과 텍스트 탭 --- */}\r\n            <Typography variant=\"h6\" gutterBottom sx={{ mt: 6 }}>\r\n                Icon Tabs\r\n            </Typography>\r\n            <DsTabs tabs={iconTabs} />\r\n\r\n            {/* --- 예제 4: 스크롤 가능한 탭 (새로 추가) --- */}\r\n            <Typography variant=\"h6\" gutterBottom sx={{ mt: 6 }}>\r\n                Scrollable Tabs\r\n            </Typography>\r\n            <Typography color=\"text.secondary\" sx={{ mb: 2 }}>\r\n                탭의 개수가 컨테이너 너비를 초과할 때 스크롤 버튼을 표시합니다.\r\n            </Typography>\r\n            <Box sx={{ maxWidth: { xs: 320, sm: 480 }}}>\r\n                <DsTabs\r\n                    tabs={scrollableTabs}\r\n                    variant=\"scrollable\"\r\n                    scrollButtons\r\n                    allowScrollButtonsMobile\r\n                    aria-label=\"scrollable force tabs example\"\r\n                />\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default TabsPage;"],"names":["getTextFieldUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","variantComponent","standard","Input","filled","FilledInput","outlined","OutlinedInput","TextFieldRoot","styled","FormControl","name","React","inProps","ref","props","useDefaultProps","autoComplete","autoFocus","children","className","color","defaultValue","disabled","error","FormHelperTextProps","FormHelperTextPropsProp","fullWidth","helperText","id","idOverride","InputLabelProps","InputLabelPropsProp","inputProps","inputPropsProp","InputProps","InputPropsProp","inputRef","label","maxRows","minRows","multiline","onBlur","onChange","onFocus","placeholder","required","rows","select","SelectProps","SelectPropsProp","slots","slotProps","type","value","variant","other","_objectWithoutProperties","ownerState","_objectSpread","classes","composeClasses","root","useUtilityClasses","useId","helperTextId","concat","undefined","inputLabelId","InputComponent","externalForwardedProps","input","inputLabel","htmlInput","formHelperText","inputAdditionalProps","inputLabelSlotProps","shrink","notched","native","RootSlot","rootProps","useSlot","elementType","shouldForwardComponentProp","clsx","additionalProps","InputSlot","InputLabelSlot","inputLabelProps","InputLabel","HtmlInputSlot","htmlInputProps","FormHelperTextSlot","formHelperTextProps","FormHelperText","SelectSlot","selectProps","Select","InputElement","_jsx","_jsxs","htmlFor","labelId","createSvgIcon","d","TabPanel","index","role","hidden","Box","sx","p","_ref","tabs","_excluded2","activeTab","setActiveTab","useState","width","borderBottom","borderColor","Tabs","handleChange","event","newValue","map","tab","Tab","icon","iconPosition","a11yProps","content","TabsPage","basicTabs","Typography","TextField","margin","iconTabs","PhoneIcon","FavoriteIcon","PersonPinIcon","gutterBottom","mb","mt","DsTabs","slice","centered","maxWidth","xs","sm","scrollButtons","allowScrollButtonsMobile"],"sourceRoot":""}