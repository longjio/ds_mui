{"version":3,"file":"static/js/960.acf8cb6d.chunk.js","mappings":"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","sources":["../node_modules/@mui/system/esm/Stack/createStack.js","../node_modules/@mui/material/esm/Stack/Stack.js","../node_modules/@mui/system/esm/styled/styled.js","components/input/DsTextField.tsx","pages/TextFieldPage.tsx","../node_modules/@mui/material/esm/TextField/textFieldClasses.js","../node_modules/@mui/material/esm/TextField/TextField.js","../node_modules/@mui/system/esm/useThemeProps/useThemeProps.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport deepmerge from '@mui/utils/deepmerge';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nimport composeClasses from '@mui/utils/composeClasses';\nimport systemStyled from \"../styled/index.js\";\nimport useThemePropsSystem from \"../useThemeProps/index.js\";\nimport { extendSxProp } from \"../styleFunctionSx/index.js\";\nimport createTheme from \"../createTheme/index.js\";\nimport { handleBreakpoints, mergeBreakpointsInOrder, resolveBreakpointValues } from \"../breakpoints/index.js\";\nimport { createUnarySpacing, getValue } from \"../spacing/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultTheme = createTheme();\n// widening Theme to any so that the consumer can own the theme structure.\nconst defaultCreateStyledComponent = systemStyled('div', {\n  name: 'MuiStack',\n  slot: 'Root'\n});\nfunction useThemePropsDefault(props) {\n  return useThemePropsSystem({\n    props,\n    name: 'MuiStack',\n    defaultTheme\n  });\n}\n\n/**\n * Return an array with the separator React element interspersed between\n * each React node of the input children.\n *\n * > joinChildren([1,2,3], 0)\n * [1,0,2,0,3]\n */\nfunction joinChildren(children, separator) {\n  const childrenArray = React.Children.toArray(children).filter(Boolean);\n  return childrenArray.reduce((output, child, index) => {\n    output.push(child);\n    if (index < childrenArray.length - 1) {\n      output.push(/*#__PURE__*/React.cloneElement(separator, {\n        key: `separator-${index}`\n      }));\n    }\n    return output;\n  }, []);\n}\nconst getSideFromDirection = direction => {\n  return {\n    row: 'Left',\n    'row-reverse': 'Right',\n    column: 'Top',\n    'column-reverse': 'Bottom'\n  }[direction];\n};\nexport const style = ({\n  ownerState,\n  theme\n}) => {\n  let styles = {\n    display: 'flex',\n    flexDirection: 'column',\n    ...handleBreakpoints({\n      theme\n    }, resolveBreakpointValues({\n      values: ownerState.direction,\n      breakpoints: theme.breakpoints.values\n    }), propValue => ({\n      flexDirection: propValue\n    }))\n  };\n  if (ownerState.spacing) {\n    const transformer = createUnarySpacing(theme);\n    const base = Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {\n      if (typeof ownerState.spacing === 'object' && ownerState.spacing[breakpoint] != null || typeof ownerState.direction === 'object' && ownerState.direction[breakpoint] != null) {\n        acc[breakpoint] = true;\n      }\n      return acc;\n    }, {});\n    const directionValues = resolveBreakpointValues({\n      values: ownerState.direction,\n      base\n    });\n    const spacingValues = resolveBreakpointValues({\n      values: ownerState.spacing,\n      base\n    });\n    if (typeof directionValues === 'object') {\n      Object.keys(directionValues).forEach((breakpoint, index, breakpoints) => {\n        const directionValue = directionValues[breakpoint];\n        if (!directionValue) {\n          const previousDirectionValue = index > 0 ? directionValues[breakpoints[index - 1]] : 'column';\n          directionValues[breakpoint] = previousDirectionValue;\n        }\n      });\n    }\n    const styleFromPropValue = (propValue, breakpoint) => {\n      if (ownerState.useFlexGap) {\n        return {\n          gap: getValue(transformer, propValue)\n        };\n      }\n      return {\n        // The useFlexGap={false} implement relies on each child to give up control of the margin.\n        // We need to reset the margin to avoid double spacing.\n        '& > :not(style):not(style)': {\n          margin: 0\n        },\n        '& > :not(style) ~ :not(style)': {\n          [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: getValue(transformer, propValue)\n        }\n      };\n    };\n    styles = deepmerge(styles, handleBreakpoints({\n      theme\n    }, spacingValues, styleFromPropValue));\n  }\n  styles = mergeBreakpointsInOrder(theme.breakpoints, styles);\n  return styles;\n};\nexport default function createStack(options = {}) {\n  const {\n    // This will allow adding custom styled fn (for example for custom sx style function)\n    createStyledComponent = defaultCreateStyledComponent,\n    useThemeProps = useThemePropsDefault,\n    componentName = 'MuiStack'\n  } = options;\n  const useUtilityClasses = () => {\n    const slots = {\n      root: ['root']\n    };\n    return composeClasses(slots, slot => generateUtilityClass(componentName, slot), {});\n  };\n  const StackRoot = createStyledComponent(style);\n  const Stack = /*#__PURE__*/React.forwardRef(function Grid(inProps, ref) {\n    const themeProps = useThemeProps(inProps);\n    const props = extendSxProp(themeProps); // `color` type conflicts with html color attribute.\n    const {\n      component = 'div',\n      direction = 'column',\n      spacing = 0,\n      divider,\n      children,\n      className,\n      useFlexGap = false,\n      ...other\n    } = props;\n    const ownerState = {\n      direction,\n      spacing,\n      useFlexGap\n    };\n    const classes = useUtilityClasses();\n    return /*#__PURE__*/_jsx(StackRoot, {\n      as: component,\n      ownerState: ownerState,\n      ref: ref,\n      className: clsx(classes.root, className),\n      ...other,\n      children: divider ? joinChildren(children, divider) : children\n    });\n  });\n  process.env.NODE_ENV !== \"production\" ? Stack.propTypes /* remove-proptypes */ = {\n    children: PropTypes.node,\n    direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),\n    divider: PropTypes.node,\n    spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n  } : void 0;\n  return Stack;\n}","'use client';\n\nimport PropTypes from 'prop-types';\nimport { createStack } from '@mui/system';\nimport styled from \"../styles/styled.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nconst Stack = createStack({\n  createStyledComponent: styled('div', {\n    name: 'MuiStack',\n    slot: 'Root'\n  }),\n  useThemeProps: inProps => useDefaultProps({\n    props: inProps,\n    name: 'MuiStack'\n  })\n});\nprocess.env.NODE_ENV !== \"production\" ? Stack.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   * @default 'column'\n   */\n  direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),\n  /**\n   * Add an element between each child.\n   */\n  divider: PropTypes.node,\n  /**\n   * Defines the space between immediate children.\n   * @default 0\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * The system prop, which allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.\n   *\n   * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack/#limitations),\n   * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.\n   *\n   * To enable this flag globally, follow the [theme's default props](https://mui.com/material-ui/customization/theme-components/#default-props) configuration.\n   * @default false\n   */\n  useFlexGap: PropTypes.bool\n} : void 0;\nexport default Stack;","import createStyled from \"../createStyled/index.js\";\nconst styled = createStyled();\nexport default styled;","import * as React from 'react';\r\nimport TextField, { TextFieldProps as MuiTextFieldProps } from '@mui/material/TextField';\r\n\r\n// TextFieldProps를 직접 확장하여 variant를 포함한 모든 MUI TextField props를 받을 수 있도록 합니다.\r\nexport type DsTextFieldProps = MuiTextFieldProps & {\r\n    // DsTextField만의 고유한 props가 있다면 여기에 추가할 수 있습니다.\r\n    // 예를 들어, DsTextField에서만 사용되는 새로운 prop을 정의할 수 있습니다.\r\n    // customBehavior?: boolean;\r\n};\r\n\r\nexport function DsTextField({\r\n                                id: idFromProps, // props에서 오는 id\r\n                                name: nameFromProps,\r\n                                variant: variantFromProps,\r\n                                ...rest // 나머지 props\r\n                            }: DsTextFieldProps) {\r\n    const id = idFromProps ?? 'ds-text-field';\r\n    const name = nameFromProps ?? 'ds-text-field-name';\r\n    const variant = variantFromProps ?? 'outlined';\r\n\r\n    return (\r\n        <TextField\r\n            id={id}\r\n            name={name}\r\n            variant={variant}\r\n            {...rest}\r\n        />\r\n    );\r\n}\r\n","// src/pages/TextFieldPage.tsx\r\n\r\nimport React, { useState } from 'react';\r\nimport { Typography, Box, Stack } from '@mui/material';\r\nimport { DsTextField } from '../components/input/DsTextField';\r\n\r\nconst TextFieldPage = () => {\r\n    // const theme = useTheme(); // 이 예제에서는 직접 사용하지 않음\r\n\r\n    const [name, setName] = useState<string>('홍길동');\r\n    const [email, setEmail] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('secret123');\r\n    const [age, setAge] = useState<string>('30');\r\n    const [description, setDescription] = useState<string>(\r\n        '이것은 여러 줄을 입력할 수 있는 텍스트 필드입니다.\\n기본 높이보다 더 많은 내용을 담을 수 있습니다.'\r\n    );\r\n    const [search, setSearch] = useState<string>('');\r\n\r\n    const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setName(event.target.value);\r\n    };\r\n\r\n    const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(event.target.value);\r\n    };\r\n\r\n    const handlePasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(event.target.value);\r\n    };\r\n\r\n    const handleAgeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setAge(event.target.value);\r\n    };\r\n\r\n    const handleDescriptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setDescription(event.target.value);\r\n    };\r\n\r\n    const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearch(event.target.value);\r\n    };\r\n\r\n    const isEmailValid = email === '' || /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\r\n\r\n    return (\r\n        <Stack spacing={2} sx={{ p: 3 }}> {/* 전체 페이지 컨테이너 */}\r\n            <Typography variant=\"h1\" component=\"h1\" gutterBottom>\r\n                TextField\r\n            </Typography>\r\n\r\n            <Box\r\n                component=\"form\"\r\n                sx={{\r\n                    '& .MuiTextField-root': { m: 1, width: '30ch' }, // DsTextField 내부의 MuiTextField에 스타일 적용\r\n                    display: 'flex',\r\n                    flexDirection: 'column', // 필드들을 세로로 정렬\r\n                    alignItems: 'flex-start', // 여기를 'center'에서 'flex-start'로 변경하여 좌측 정렬\r\n                    p: 2,\r\n                    border: '1px solid #ccc',\r\n                    maxWidth: '400px', // 전체 폼의 최대 너비 제한\r\n                }}\r\n                noValidate\r\n                autoComplete=\"off\"\r\n            >\r\n                <DsTextField\r\n                    label=\"이름 (제어됨)\"\r\n                    value={name}\r\n                    onChange={handleNameChange}\r\n                    id=\"name-field\"\r\n                    name=\"name\"\r\n                />\r\n                <Typography variant=\"caption\" display=\"block\" sx={{ width: '30ch', textAlign: 'left', ml: 1 }}>\r\n                    입력된 이름: {name}\r\n                </Typography>\r\n\r\n                <DsTextField\r\n                    label=\"검색어\"\r\n                    value={search}\r\n                    onChange={handleSearchChange}\r\n                    id=\"search-field\"\r\n                    name=\"search\"\r\n                    helperText=\"검색어를 입력하세요.\"\r\n                />\r\n\r\n                <DsTextField\r\n                    label=\"이메일 (유효성 검사)\"\r\n                    value={email}\r\n                    onChange={handleEmailChange}\r\n                    id=\"email-field\"\r\n                    name=\"email\"\r\n                    type=\"email\"\r\n                    error={!isEmailValid}\r\n                    helperText={!isEmailValid ? '올바른 이메일 형식이 아닙니다.' : '이메일을 입력해주세요.'}\r\n                    required\r\n                />\r\n\r\n                <DsTextField\r\n                    label=\"비밀번호 (비활성화)\"\r\n                    value={password}\r\n                    onChange={handlePasswordChange}\r\n                    id=\"password-field-disabled\"\r\n                    name=\"passwordDisabled\"\r\n                    type=\"password\"\r\n                    disabled\r\n                    helperText=\"이 필드는 비활성화되어 있습니다.\"\r\n                />\r\n\r\n                <DsTextField\r\n                    label=\"나이 (숫자 입력)\"\r\n                    value={age}\r\n                    onChange={handleAgeChange}\r\n                    id=\"age-field\"\r\n                    name=\"age\"\r\n                    type=\"number\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                />\r\n\r\n                <DsTextField\r\n                    label=\"읽기 전용 필드\"\r\n                    value=\"변경할 수 없는 값입니다.\"\r\n                    id=\"read-only-field\"\r\n                    name=\"readOnlyField\"\r\n                    InputProps={{\r\n                        readOnly: true,\r\n                    }}\r\n                    helperText=\"이 필드는 읽기 전용입니다.\"\r\n                />\r\n\r\n                <DsTextField\r\n                    label=\"설명 (여러 줄 입력)\"\r\n                    value={description}\r\n                    onChange={handleDescriptionChange}\r\n                    id=\"description-field\"\r\n                    name=\"description\"\r\n                    multiline\r\n                    rows={4}\r\n                    placeholder=\"여기에 설명을 입력하세요...\"\r\n                    sx={{ width: '100% !important' }} // 여러 줄 입력 필드는 너비를 100%로 강제\r\n                />\r\n            </Box>\r\n        </Stack>\r\n    );\r\n};\r\n\r\nexport default TextFieldPage;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTextFieldUtilityClass(slot) {\n  return generateUtilityClass('MuiTextField', slot);\n}\nconst textFieldClasses = generateUtilityClasses('MuiTextField', ['root']);\nexport default textFieldClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport useId from '@mui/utils/useId';\nimport refType from '@mui/utils/refType';\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport Input from \"../Input/index.js\";\nimport FilledInput from \"../FilledInput/index.js\";\nimport OutlinedInput from \"../OutlinedInput/index.js\";\nimport InputLabel from \"../InputLabel/index.js\";\nimport FormControl from \"../FormControl/index.js\";\nimport FormHelperText from \"../FormHelperText/index.js\";\nimport Select from \"../Select/index.js\";\nimport { getTextFieldUtilityClass } from \"./textFieldClasses.js\";\nimport useSlot from \"../utils/useSlot.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst variantComponent = {\n  standard: Input,\n  filled: FilledInput,\n  outlined: OutlinedInput\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTextFieldUtilityClass, classes);\n};\nconst TextFieldRoot = styled(FormControl, {\n  name: 'MuiTextField',\n  slot: 'Root'\n})({});\n\n/**\n * The `TextField` is a convenience wrapper for the most common cases (80%).\n * It cannot be all things to all people, otherwise the API would grow out of control.\n *\n * ## Advanced Configuration\n *\n * It's important to understand that the text field is a simple abstraction\n * on top of the following components:\n *\n * - [FormControl](/material-ui/api/form-control/)\n * - [InputLabel](/material-ui/api/input-label/)\n * - [FilledInput](/material-ui/api/filled-input/)\n * - [OutlinedInput](/material-ui/api/outlined-input/)\n * - [Input](/material-ui/api/input/)\n * - [FormHelperText](/material-ui/api/form-helper-text/)\n *\n * If you wish to alter the props applied to the `input` element, you can do so as follows:\n *\n * ```jsx\n * const inputProps = {\n *   step: 300,\n * };\n *\n * return <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n * ```\n *\n * For advanced cases, please look at the source of TextField by clicking on the\n * \"Edit this page\" button above. Consider either:\n *\n * - using the upper case props for passing values directly to the components\n * - using the underlying components directly as shown in the demos\n */\nconst TextField = /*#__PURE__*/React.forwardRef(function TextField(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTextField'\n  });\n  const {\n    autoComplete,\n    autoFocus = false,\n    children,\n    className,\n    color = 'primary',\n    defaultValue,\n    disabled = false,\n    error = false,\n    FormHelperTextProps: FormHelperTextPropsProp,\n    fullWidth = false,\n    helperText,\n    id: idOverride,\n    InputLabelProps: InputLabelPropsProp,\n    inputProps: inputPropsProp,\n    InputProps: InputPropsProp,\n    inputRef,\n    label,\n    maxRows,\n    minRows,\n    multiline = false,\n    name,\n    onBlur,\n    onChange,\n    onFocus,\n    placeholder,\n    required = false,\n    rows,\n    select = false,\n    SelectProps: SelectPropsProp,\n    slots = {},\n    slotProps = {},\n    type,\n    value,\n    variant = 'outlined',\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    autoFocus,\n    color,\n    disabled,\n    error,\n    fullWidth,\n    multiline,\n    required,\n    select,\n    variant\n  };\n  const classes = useUtilityClasses(ownerState);\n  if (process.env.NODE_ENV !== 'production') {\n    if (select && !children) {\n      console.error('MUI: `children` must be passed when using the `TextField` component with `select`.');\n    }\n  }\n  const id = useId(idOverride);\n  const helperTextId = helperText && id ? `${id}-helper-text` : undefined;\n  const inputLabelId = label && id ? `${id}-label` : undefined;\n  const InputComponent = variantComponent[variant];\n  const externalForwardedProps = {\n    slots,\n    slotProps: {\n      input: InputPropsProp,\n      inputLabel: InputLabelPropsProp,\n      htmlInput: inputPropsProp,\n      formHelperText: FormHelperTextPropsProp,\n      select: SelectPropsProp,\n      ...slotProps\n    }\n  };\n  const inputAdditionalProps = {};\n  const inputLabelSlotProps = externalForwardedProps.slotProps.inputLabel;\n  if (variant === 'outlined') {\n    if (inputLabelSlotProps && typeof inputLabelSlotProps.shrink !== 'undefined') {\n      inputAdditionalProps.notched = inputLabelSlotProps.shrink;\n    }\n    inputAdditionalProps.label = label;\n  }\n  if (select) {\n    // unset defaults from textbox inputs\n    if (!SelectPropsProp || !SelectPropsProp.native) {\n      inputAdditionalProps.id = undefined;\n    }\n    inputAdditionalProps['aria-describedby'] = undefined;\n  }\n  const [RootSlot, rootProps] = useSlot('root', {\n    elementType: TextFieldRoot,\n    shouldForwardComponentProp: true,\n    externalForwardedProps: {\n      ...externalForwardedProps,\n      ...other\n    },\n    ownerState,\n    className: clsx(classes.root, className),\n    ref,\n    additionalProps: {\n      disabled,\n      error,\n      fullWidth,\n      required,\n      color,\n      variant\n    }\n  });\n  const [InputSlot, inputProps] = useSlot('input', {\n    elementType: InputComponent,\n    externalForwardedProps,\n    additionalProps: inputAdditionalProps,\n    ownerState\n  });\n  const [InputLabelSlot, inputLabelProps] = useSlot('inputLabel', {\n    elementType: InputLabel,\n    externalForwardedProps,\n    ownerState\n  });\n  const [HtmlInputSlot, htmlInputProps] = useSlot('htmlInput', {\n    elementType: 'input',\n    externalForwardedProps,\n    ownerState\n  });\n  const [FormHelperTextSlot, formHelperTextProps] = useSlot('formHelperText', {\n    elementType: FormHelperText,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SelectSlot, selectProps] = useSlot('select', {\n    elementType: Select,\n    externalForwardedProps,\n    ownerState\n  });\n  const InputElement = /*#__PURE__*/_jsx(InputSlot, {\n    \"aria-describedby\": helperTextId,\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    defaultValue: defaultValue,\n    fullWidth: fullWidth,\n    multiline: multiline,\n    name: name,\n    rows: rows,\n    maxRows: maxRows,\n    minRows: minRows,\n    type: type,\n    value: value,\n    id: id,\n    inputRef: inputRef,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    placeholder: placeholder,\n    inputProps: htmlInputProps,\n    slots: {\n      input: slots.htmlInput ? HtmlInputSlot : undefined\n    },\n    ...inputProps\n  });\n  return /*#__PURE__*/_jsxs(RootSlot, {\n    ...rootProps,\n    children: [label != null && label !== '' && /*#__PURE__*/_jsx(InputLabelSlot, {\n      htmlFor: id,\n      id: inputLabelId,\n      ...inputLabelProps,\n      children: label\n    }), select ? /*#__PURE__*/_jsx(SelectSlot, {\n      \"aria-describedby\": helperTextId,\n      id: id,\n      labelId: inputLabelId,\n      value: value,\n      input: InputElement,\n      ...selectProps,\n      children: children\n    }) : InputElement, helperText && /*#__PURE__*/_jsx(FormHelperTextSlot, {\n      id: helperTextId,\n      ...formHelperTextProps,\n      children: helperText\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TextField.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the label is displayed in an error state.\n   * @default false\n   */\n  error: PropTypes.bool,\n  /**\n   * Props applied to the [`FormHelperText`](https://mui.com/material-ui/api/form-helper-text/) element.\n   * @deprecated Use `slotProps.formHelperText` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  FormHelperTextProps: PropTypes.object,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The helper text content.\n   */\n  helperText: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   * Use this prop to make `label` and `helperText` accessible for screen readers.\n   */\n  id: PropTypes.string,\n  /**\n   * Props applied to the [`InputLabel`](https://mui.com/material-ui/api/input-label/) element.\n   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.\n   * @deprecated Use `slotProps.inputLabel` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  InputLabelProps: PropTypes.object,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#attributes) applied to the `input` element.\n   * @deprecated Use `slotProps.htmlInput` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](https://mui.com/material-ui/api/filled-input/),\n   * [`OutlinedInput`](https://mui.com/material-ui/api/outlined-input/) or [`Input`](https://mui.com/material-ui/api/input/)\n   * component depending on the `variant` prop value.\n   * @deprecated Use `slotProps.input` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  InputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   * @default 'none'\n   */\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Minimum number of rows to display when multiline option is set to true.\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * If `true`, a `textarea` element is rendered instead of an input.\n   * @default false\n   */\n  multiline: PropTypes.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * The short hint displayed in the `input` before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n  /**\n   * If `true`, the label is displayed as required and the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Render a [`Select`](https://mui.com/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.\n   * If this option is set you must pass the options of the select as children.\n   * @default false\n   */\n  select: PropTypes.bool,\n  /**\n   * Props applied to the [`Select`](https://mui.com/material-ui/api/select/) element.\n   * @deprecated Use `slotProps.select` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  SelectProps: PropTypes.object,\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    formHelperText: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    htmlInput: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    inputLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    select: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    formHelperText: PropTypes.elementType,\n    htmlInput: PropTypes.elementType,\n    input: PropTypes.elementType,\n    inputLabel: PropTypes.elementType,\n    root: PropTypes.elementType,\n    select: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#input_types).\n   */\n  type: PropTypes /* @typescript-to-proptypes-ignore */.string,\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any,\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default TextField;","'use client';\n\nimport getThemeProps from \"./getThemeProps.js\";\nimport useTheme from \"../useTheme/index.js\";\nexport default function useThemeProps({\n  props,\n  name,\n  defaultTheme,\n  themeId\n}) {\n  let theme = useTheme(defaultTheme);\n  if (themeId) {\n    theme = theme[themeId] || theme;\n  }\n  return getThemeProps({\n    theme,\n    name,\n    props\n  });\n}"],"names":["_excluded","defaultTheme","createTheme","defaultCreateStyledComponent","systemStyled","name","slot","useThemePropsDefault","props","useThemePropsSystem","joinChildren","children","separator","childrenArray","React","toArray","filter","Boolean","reduce","output","child","index","push","length","key","concat","style","_ref","ownerState","theme","styles","_objectSpread","display","flexDirection","handleBreakpoints","resolveBreakpointValues","values","direction","breakpoints","propValue","spacing","transformer","createUnarySpacing","base","Object","keys","acc","breakpoint","directionValues","spacingValues","forEach","previousDirectionValue","styleFromPropValue","useFlexGap","gap","getValue","margin","row","column","deepmerge","mergeBreakpointsInOrder","Stack","options","arguments","undefined","createStyledComponent","useThemeProps","componentName","StackRoot","inProps","ref","themeProps","extendSxProp","component","divider","className","other","_objectWithoutProperties","classes","composeClasses","root","generateUtilityClass","_jsx","as","clsx","createStack","styled","useDefaultProps","createStyled","DsTextField","id","idFromProps","nameFromProps","variant","variantFromProps","rest","TextField","TextFieldPage","setName","useState","email","setEmail","password","setPassword","age","setAge","description","setDescription","search","setSearch","isEmailValid","test","_jsxs","sx","p","Typography","gutterBottom","Box","m","width","alignItems","border","maxWidth","noValidate","autoComplete","label","value","onChange","event","target","textAlign","ml","helperText","type","error","required","disabled","InputLabelProps","shrink","InputProps","readOnly","multiline","rows","placeholder","getTextFieldUtilityClass","generateUtilityClasses","variantComponent","standard","Input","filled","FilledInput","outlined","OutlinedInput","TextFieldRoot","FormControl","autoFocus","color","defaultValue","FormHelperTextProps","FormHelperTextPropsProp","fullWidth","idOverride","InputLabelPropsProp","inputProps","inputPropsProp","InputPropsProp","inputRef","maxRows","minRows","onBlur","onFocus","select","SelectProps","SelectPropsProp","slots","slotProps","useUtilityClasses","useId","helperTextId","inputLabelId","InputComponent","externalForwardedProps","input","inputLabel","htmlInput","formHelperText","inputAdditionalProps","inputLabelSlotProps","notched","native","RootSlot","rootProps","useSlot","elementType","shouldForwardComponentProp","additionalProps","InputSlot","InputLabelSlot","inputLabelProps","InputLabel","HtmlInputSlot","htmlInputProps","FormHelperTextSlot","formHelperTextProps","FormHelperText","SelectSlot","selectProps","Select","InputElement","htmlFor","labelId","themeId","useTheme","getThemeProps"],"sourceRoot":""}