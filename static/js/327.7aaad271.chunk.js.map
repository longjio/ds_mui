{"version":3,"file":"static/js/327.7aaad271.chunk.js","mappings":"wKAoBe,SAASA,EAAUC,GASsB,IATrB,MACIC,EAAK,QACLC,EAAO,SACPC,EAAQ,SACRC,EAAQ,GACRC,EAAE,KACFC,EAAI,MACJC,EAAK,KACLC,GACcR,EACjD,OACIS,EAAAA,EAAAA,KAACC,EAAAA,EAAgB,CACbC,SACIF,EAAAA,EAAAA,KAACG,EAAAA,EAAQ,CACLV,QAASA,EACTC,SAAUA,EACVC,SAAUA,EACVC,GAAIA,EACJC,KAAMA,EACNC,MAAOA,EACPC,KAAMA,IAKdP,MAAOA,EAEPG,SAAUA,GAGtB,C,wBCzCe,SAASS,IAEpB,MAAOC,EAAYC,GAAiBC,EAAAA,UAAwB,IAErDC,EAAYC,GAAiBF,EAAAA,UAAwB,GAa5D,OACIG,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,GAAIC,SAAA,EACpBd,EAAAA,EAAAA,KAACe,EAAAA,EAAU,CAACC,QAAQ,KAAKC,UAAU,KAAKC,cAAY,EAAAJ,SAAC,cAIrDd,EAAAA,EAAAA,KAACe,EAAAA,EAAU,CAACC,QAAQ,KAAKE,cAAY,EAACN,GAAI,CAAEO,GAAI,GAAIL,SAAC,oBAGrDd,EAAAA,EAAAA,KAACV,EAAU,CACPE,MAAM,4CACNC,QAASY,EACTX,SAvBU0B,CAACC,EAA4C5B,KAC/Da,EAAcb,GACd6B,QAAQC,IAAI,wBAAyB9B,IAsB7BG,GAAG,oBACHC,KAAK,YACLC,MAAM,aAEVY,EAAAA,EAAAA,MAACK,EAAAA,EAAU,CAACC,QAAQ,QAAQJ,GAAI,CAAEO,GAAI,GAAIL,SAAA,CAAC,aAC5BT,EAAa,MAAQ,SAGpCL,EAAAA,EAAAA,KAACe,EAAAA,EAAU,CAACC,QAAQ,KAAKE,cAAY,EAACN,GAAI,CAAEO,GAAI,GAAIL,SAAC,4CAGrDd,EAAAA,EAAAA,KAACV,EAAU,CACPE,MAAM,qEACNC,QAASe,EACTd,SAjCU8B,CAACH,EAA4C5B,KAE/DgB,EAAchB,GACd6B,QAAQC,IAAI,wBAAyB9B,IA+B7BE,UAAU,EACVC,GAAG,oBACHC,KAAK,oBACLC,MAAM,eAGVE,EAAAA,EAAAA,KAACe,EAAAA,EAAU,CAACC,QAAQ,KAAKE,cAAY,EAACN,GAAI,CAAEO,GAAI,GAAIL,SAAC,4BAGrDd,EAAAA,EAAAA,KAACV,EAAU,CACPG,SAAS,EACTC,SAAUA,CAAC2B,EAAO5B,IAAY6B,QAAQC,IAAI,mCAAoC9B,GAC9EG,GAAG,oBACH,aAAW,yBAGfI,EAAAA,EAAAA,KAACe,EAAAA,EAAU,CAACC,QAAQ,KAAKE,cAAY,EAACN,GAAI,CAAEO,GAAI,GAAIL,SAAC,yBAGrDd,EAAAA,EAAAA,KAACV,EAAU,CACPE,MAAM,yCACNC,SAAS,EACTC,SAAUA,CAAC2B,EAAO5B,IAAY6B,QAAQC,IAAI,gCAAiC9B,GAC3EG,GAAG,oBACHG,KAAK,YAIrB,C,iBClFe,SAAS0B,EAAgBlC,GAIrC,IAJsC,MACvCmC,EAAK,OACLC,EAAM,eACNC,GACDrC,EACC,OAAOoC,EAAOE,QAAO,CAACC,EAAKC,KACzBD,EAAIC,GAASL,EAAMK,GACfH,GAC0B,qBAAjBF,EAAMK,KACfD,EAAIC,GAASH,EAAeG,IAGzBD,IACN,CAAC,EACN,C,0ECVe,SAASE,IACtB,OAAOzB,EAAAA,WAAiB0B,EAAAA,EAC1B,C,kCCIA,Q,QAJwC1B,mBAAoB2B,E,6HCG5D,SAAeC,EAAAA,EAAAA,IAA2BnC,EAAAA,EAAAA,KAAK,OAAQ,CACrDoC,EAAG,+FACD,wBCFJ,GAAeD,EAAAA,EAAAA,IAA2BnC,EAAAA,EAAAA,KAAK,OAAQ,CACrDoC,EAAG,wIACD,YCFJ,GAAeD,EAAAA,EAAAA,IAA2BnC,EAAAA,EAAAA,KAAK,OAAQ,CACrDoC,EAAG,kGACD,yB,4CCTG,SAASC,EAAwBC,GACtC,OAAOC,EAAAA,EAAAA,IAAqB,cAAeD,EAC7C,CACA,MACA,GADwBE,EAAAA,EAAAA,GAAuB,cAAe,CAAC,OAAQ,UAAW,WAAY,gBAAiB,eAAgB,iBAAkB,YAAa,e,+DCLjJ,MAAAC,EAAA,uIAsCPC,GAAeC,EAAAA,EAAAA,IAAOC,EAAAA,EAAY,CACtCC,kBAAmBC,IAAQC,EAAAA,EAAAA,GAAsBD,IAAkB,YAATA,EAC1DjD,KAAM,cACNyC,KAAM,OACNU,kBAAmBA,CAACtB,EAAOuB,KACzB,MAAM,WACJC,GACExB,EACJ,MAAO,CAACuB,EAAOE,KAAMD,EAAWE,eAAiBH,EAAOG,cAAeH,EAAO,OAADI,QAAQC,EAAAA,EAAAA,GAAWJ,EAAWnD,QAA+B,YAArBmD,EAAWpD,OAAuBmD,EAAO,QAADI,QAASC,EAAAA,EAAAA,GAAWJ,EAAWpD,YAR3K6C,EAUlBY,EAAAA,EAAAA,IAAUhE,IAAA,IAAC,MACZiE,GACDjE,EAAA,MAAM,CACLO,OAAQ0D,EAAMC,MAAQD,GAAOE,QAAQC,KAAKC,UAC1CC,SAAU,CAAC,CACTnC,MAAO,CACL5B,MAAO,UACPgE,eAAe,GAEjBC,MAAO,CACL,UAAW,CACTC,gBAAiBR,EAAMC,KAAO,QAAHJ,OAAWG,EAAMC,KAAKC,QAAQO,OAAOC,cAAa,OAAAb,OAAMG,EAAMC,KAAKC,QAAQO,OAAOE,aAAY,MAAMC,EAAAA,EAAAA,IAAMZ,EAAME,QAAQO,OAAOI,OAAQb,EAAME,QAAQO,OAAOE,oBAGvLG,OAAOC,QAAQf,EAAME,SAASc,QAAOC,EAAAA,EAAAA,MAAkCC,KAAIC,IAAA,IAAE7E,GAAM6E,EAAA,MAAM,CAC7FjD,MAAO,CACL5B,QACAgE,eAAe,GAEjBC,MAAO,CACL,UAAW,CACTC,gBAAiBR,EAAMC,KAAO,QAAHJ,OAAWG,EAAMC,KAAKC,QAAQ5D,GAAO8E,YAAW,OAAAvB,OAAMG,EAAMC,KAAKC,QAAQO,OAAOE,aAAY,MAAMC,EAAAA,EAAAA,IAAMZ,EAAME,QAAQ5D,GAAO+E,KAAMrB,EAAME,QAAQO,OAAOE,uBAGjLG,OAAOC,QAAQf,EAAME,SAASc,QAAOC,EAAAA,EAAAA,MAAkCC,KAAII,IAAA,IAAEhF,GAAMgF,EAAA,MAAM,CAC/FpD,MAAO,CACL5B,SAEFiE,MAAO,CACL,CAAC,KAADV,OAAM0B,EAAgBtF,QAAO,QAAA4D,OAAO0B,EAAgB3B,gBAAkB,CACpEtD,OAAQ0D,EAAMC,MAAQD,GAAOE,QAAQ5D,GAAO+E,MAE9C,CAAC,KAADxB,OAAM0B,EAAgBpF,WAAa,CACjCG,OAAQ0D,EAAMC,MAAQD,GAAOE,QAAQO,OAAOtE,eAG7C,CAEH+B,MAAO,CACLoC,eAAe,GAEjBC,MAAO,CAEL,UAAW,CACT,uBAAwB,CACtBC,gBAAiB,wBAMrBgB,GAAkChF,EAAAA,EAAAA,KAAKiF,EAAc,CAAC,GACtDC,GAA2BlF,EAAAA,EAAAA,KAAKmF,EAA0B,CAAC,GAC3DC,GAAwCpF,EAAAA,EAAAA,KAAKqF,EAA2B,CAAC,GAkL/E,EAjL8B9E,EAAAA,YAAiB,SAAkB+E,EAASC,GAAK,IAAAC,EAAAC,EAAAC,EAC7E,MAAMhE,GAAQiE,EAAAA,EAAAA,GAAgB,CAC5BjE,MAAO4D,EACPzF,KAAM,iBAEF,YACJ+F,EAAcZ,EAAkB,MAChClF,EAAQ,UACR+F,KAAMC,EAAWZ,EAAW,cAC5B9B,GAAgB,EAChB2C,kBAAmBC,EAAwBZ,EAAwB,WACnEa,EAAU,KACVlG,EAAO,SAAQ,cACf+D,GAAgB,EAAK,UACrBoC,EAAS,MACTC,EAAQ,CAAC,EAAC,UACVC,EAAY,CAAC,GAEX1E,EADC2E,GAAKC,EAAAA,EAAAA,GACN5E,EAAKe,GACHoD,EAAOzC,EAAgB4C,EAAwBF,EAC/CC,EAAoB3C,EAAgB4C,EAAwBJ,EAC5D1C,GAAUqD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACX7E,GAAK,IACRoC,gBACAhE,QACAsD,gBACArD,SAEIyG,EA7GkBtD,KACxB,MAAM,QACJsD,EAAO,cACPpD,EAAa,MACbtD,EAAK,KACLC,GACEmD,EACEiD,EAAQ,CACZhD,KAAM,CAAC,OAAQC,GAAiB,gBAAiB,QAAFC,QAAUC,EAAAA,EAAAA,GAAWxD,IAAM,OAAAuD,QAAWC,EAAAA,EAAAA,GAAWvD,MAE5F0G,GAAkBC,EAAAA,EAAAA,GAAeP,EAAO9D,EAAyBmE,GACvE,OAAAD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKC,GAEAC,IA+FWE,CAAkBzD,GAC5B0D,EAAoC,QAAlBpB,EAAGY,EAAUS,aAAK,IAAArB,EAAAA,EAAIS,GACvCa,EAAUC,IAAiBC,EAAAA,EAAAA,GAAQ,OAAQ,CAChDzB,MACA0B,YAAavE,EACbwD,WAAWgB,EAAAA,EAAAA,GAAKV,EAAQrD,KAAM+C,GAC9BiB,4BAA4B,EAC5BC,wBAAsBb,EAAAA,EAAAA,GAAA,CACpBJ,QACAC,aACGC,GAELnD,aACAmE,gBAAiB,CACfC,KAAM,WACNzB,KAAmBtF,EAAAA,aAAmBsF,EAAM,CAC1C0B,SAA6B,QAArB9B,EAAEI,EAAKnE,MAAM6F,gBAAQ,IAAA9B,EAAAA,EAAI1F,IAEnC6F,YAA0BrF,EAAAA,aAAmBwF,EAAmB,CAC9DwB,SAA0C,QAAlC7B,EAAEK,EAAkBrE,MAAM6F,gBAAQ,IAAA7B,EAAAA,EAAI3F,IAEhD+D,gBACAqC,QACAC,UAAW,CACTS,OAAOW,EAAAA,EAAAA,GAA6C,oBAAvBZ,EAAoCA,EAAmB1D,GAAc0D,EAAoB,CACpH,qBAAsBxD,QAK9B,OAAoBpD,EAAAA,EAAAA,KAAK8G,GAAQP,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC5BQ,GAAa,IAChBP,QAASA,IAEb,G","sources":["components/input/DsCheckbox.tsx","pages/CheckboxPage.tsx","../node_modules/@mui/material/esm/FormControl/formControlState.js","../node_modules/@mui/material/esm/FormControl/useFormControl.js","../node_modules/@mui/material/esm/FormControl/FormControlContext.js","../node_modules/@mui/material/esm/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@mui/material/esm/internal/svg-icons/CheckBox.js","../node_modules/@mui/material/esm/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@mui/material/esm/Checkbox/checkboxClasses.js","../node_modules/@mui/material/esm/Checkbox/Checkbox.js"],"sourcesContent":["import { Checkbox, FormControlLabel, CheckboxProps as MuiCheckboxProps } from '@mui/material';\r\nimport * as React from 'react'; // React 임포트 추가\r\n\r\n// 1. Props 인터페이스 이름 변경 및 확장\r\nexport interface DsCheckboxProps {\r\n    label?: string; // 체크박스 옆에 표시될 라벨\r\n    checked?: boolean;\r\n    // 2. onChange 핸들러 시그니처를 MUI Checkbox와 일치시킵니다.\r\n    onChange?: (event: React.ChangeEvent<HTMLInputElement>, checked: boolean) => void;\r\n    disabled?: boolean; // 체크박스 및 라벨 비활성화 여부\r\n    id?: string; // 체크박스 DOM ID (접근성 및 테스트에 유용)\r\n    name?: string; // 폼 제출 시 사용될 체크박스 이름\r\n    // MUI Checkbox의 다른 유용한 props 추가\r\n    color?: MuiCheckboxProps['color']; // 'primary', 'secondary', 'default', 등\r\n    size?: MuiCheckboxProps['size'];   // 'small', 'medium'\r\n    // FormControlLabel 관련 props도 필요에 따라 추가 가능\r\n    // 예: labelPlacement?: 'end' | 'start' | 'top' | 'bottom';\r\n}\r\n\r\n// 1. 컴포넌트 이름 변경\r\nexport default function DsCheckbox({\r\n                                       label, // 4. 기본 라벨 'Check me' 제거 (사용하는 쪽에서 명시적으로 제공)\r\n                                       checked,\r\n                                       onChange,\r\n                                       disabled,\r\n                                       id,\r\n                                       name,\r\n                                       color,\r\n                                       size,\r\n                                   }: DsCheckboxProps) {\r\n    return (\r\n        <FormControlLabel\r\n            control={\r\n                <Checkbox\r\n                    checked={checked}\r\n                    onChange={onChange}\r\n                    disabled={disabled}\r\n                    id={id}\r\n                    name={name}\r\n                    color={color}\r\n                    size={size}\r\n                    // 여기에 MuiCheckboxProps에서 가져오고 싶은 다른 props를 전달할 수 있습니다.\r\n                    // 예: inputProps={{ 'aria-label': label || 'checkbox' }}\r\n                />\r\n            }\r\n            label={label}\r\n            // FormControlLabel에도 disabled를 전달하여 라벨의 스타일과 동작을 일관되게 합니다.\r\n            disabled={disabled}\r\n        />\r\n    );\r\n}","// src/pages/CheckboxPage.tsx\r\nimport * as React from 'react';\r\n// DsCheckboxProps를 사용하지 않으므로 아래 줄에서 제거합니다.\r\nimport DsCheckbox from '../components/input/DsCheckbox'; // DsCheckbox 컴포넌트 경로\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\n\r\n// ... 나머지 코드는 동일 ...\r\n\r\nexport default function CheckboxPage() {\r\n    // 첫 번째 체크박스 상태 관리\r\n    const [isChecked1, setIsChecked1] = React.useState<boolean>(false);\r\n    // 두 번째 체크박스 상태 (기본값 true, 비활성화)\r\n    const [isChecked2, setIsChecked2] = React.useState<boolean>(true);\r\n\r\n    const handleChange1 = (event: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {\r\n        setIsChecked1(checked);\r\n        console.log('Checkbox 1 new state:', checked);\r\n    };\r\n\r\n    const handleChange2 = (event: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {\r\n        // 이 체크박스는 비활성화되어 있으므로, 실제로는 호출되지 않아야 합니다.\r\n        setIsChecked2(checked);\r\n        console.log('Checkbox 2 new state:', checked);\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ padding: 3 }}>\r\n            <Typography variant=\"h1\" component=\"h1\" gutterBottom>\r\n                Checkbox\r\n            </Typography>\r\n\r\n            <Typography variant=\"h6\" gutterBottom sx={{ mt: 2 }}>\r\n                Basic Checkbox\r\n            </Typography>\r\n            <DsCheckbox\r\n                label=\"동의합니다 (Option 1)\"\r\n                checked={isChecked1}\r\n                onChange={handleChange1}\r\n                id=\"checkbox-option-1\"\r\n                name=\"agreement\"\r\n                color=\"primary\"\r\n            />\r\n            <Typography variant=\"body2\" sx={{ mt: 1 }}>\r\n                Selected: {isChecked1 ? 'Yes' : 'No'}\r\n            </Typography>\r\n\r\n            <Typography variant=\"h6\" gutterBottom sx={{ mt: 4 }}>\r\n                Disabled Checkbox (Checked by default)\r\n            </Typography>\r\n            <DsCheckbox\r\n                label=\"이메일 수신 동의 (Option 2 - Disabled)\"\r\n                checked={isChecked2}\r\n                onChange={handleChange2} // 비활성화 상태이므로 이 핸들러는 호출되지 않습니다.\r\n                disabled={true}\r\n                id=\"checkbox-option-2\"\r\n                name=\"emailSubscription\"\r\n                color=\"secondary\"\r\n            />\r\n\r\n            <Typography variant=\"h6\" gutterBottom sx={{ mt: 4 }}>\r\n                Checkbox without Label\r\n            </Typography>\r\n            <DsCheckbox\r\n                checked={false} // 예시로 false로 설정\r\n                onChange={(event, checked) => console.log('Checkbox 3 (no label) new state:', checked)}\r\n                id=\"checkbox-option-3\"\r\n                aria-label=\"Standalone checkbox\" // 라벨이 없을 경우 접근성을 위해 aria-label 제공\r\n            />\r\n\r\n            <Typography variant=\"h6\" gutterBottom sx={{ mt: 4 }}>\r\n                Small Size Checkbox\r\n            </Typography>\r\n            <DsCheckbox\r\n                label=\"작은 크기 (Small Size)\"\r\n                checked={true} // 예시로 true로 설정\r\n                onChange={(event, checked) => console.log('Checkbox 4 (small) new state:', checked)}\r\n                id=\"checkbox-option-4\"\r\n                size=\"small\"\r\n            />\r\n        </Box>\r\n    );\r\n}","export default function formControlState({\n  props,\n  states,\n  muiFormControl\n}) {\n  return states.reduce((acc, state) => {\n    acc[state] = props[state];\n    if (muiFormControl) {\n      if (typeof props[state] === 'undefined') {\n        acc[state] = muiFormControl[state];\n      }\n    }\n    return acc;\n  }, {});\n}","'use client';\n\nimport * as React from 'react';\nimport FormControlContext from \"./FormControlContext.js\";\nexport default function useFormControl() {\n  return React.useContext(FormControlContext);\n}","'use client';\n\nimport * as React from 'react';\n/**\n * @ignore - internal component.\n */\nconst FormControlContext = /*#__PURE__*/React.createContext(undefined);\nif (process.env.NODE_ENV !== 'production') {\n  FormControlContext.displayName = 'FormControlContext';\n}\nexport default FormControlContext;","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from \"../../utils/createSvgIcon.js\";\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from \"../../utils/createSvgIcon.js\";\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from \"../../utils/createSvgIcon.js\";\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCheckboxUtilityClass(slot) {\n  return generateUtilityClass('MuiCheckbox', slot);\n}\nconst checkboxClasses = generateUtilityClasses('MuiCheckbox', ['root', 'checked', 'disabled', 'indeterminate', 'colorPrimary', 'colorSecondary', 'sizeSmall', 'sizeMedium']);\nexport default checkboxClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport SwitchBase from \"../internal/SwitchBase.js\";\nimport CheckBoxOutlineBlankIcon from \"../internal/svg-icons/CheckBoxOutlineBlank.js\";\nimport CheckBoxIcon from \"../internal/svg-icons/CheckBox.js\";\nimport IndeterminateCheckBoxIcon from \"../internal/svg-icons/IndeterminateCheckBox.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport rootShouldForwardProp from \"../styles/rootShouldForwardProp.js\";\nimport checkboxClasses, { getCheckboxUtilityClass } from \"./checkboxClasses.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport createSimplePaletteValueFilter from \"../utils/createSimplePaletteValueFilter.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { mergeSlotProps } from \"../utils/index.js\";\nimport useSlot from \"../utils/useSlot.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    indeterminate,\n    color,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`, `size${capitalize(size)}`]\n  };\n  const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);\n  return {\n    ...classes,\n    // forward the disabled and checked classes to the SwitchBase\n    ...composedClasses\n  };\n};\nconst CheckboxRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiCheckbox',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.indeterminate && styles.indeterminate, styles[`size${capitalize(ownerState.size)}`], ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  variants: [{\n    props: {\n      color: 'default',\n      disableRipple: false\n    },\n    style: {\n      '&:hover': {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)\n      }\n    }\n  }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({\n    props: {\n      color,\n      disableRipple: false\n    },\n    style: {\n      '&:hover': {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[color].main, theme.palette.action.hoverOpacity)\n      }\n    }\n  })), ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({\n    props: {\n      color\n    },\n    style: {\n      [`&.${checkboxClasses.checked}, &.${checkboxClasses.indeterminate}`]: {\n        color: (theme.vars || theme).palette[color].main\n      },\n      [`&.${checkboxClasses.disabled}`]: {\n        color: (theme.vars || theme).palette.action.disabled\n      }\n    }\n  })), {\n    // Should be last to override other colors\n    props: {\n      disableRipple: false\n    },\n    style: {\n      // Reset on touch devices, it doesn't add specificity\n      '&:hover': {\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    }\n  }]\n})));\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(CheckBoxIcon, {});\nconst defaultIcon = /*#__PURE__*/_jsx(CheckBoxOutlineBlankIcon, {});\nconst defaultIndeterminateIcon = /*#__PURE__*/_jsx(IndeterminateCheckBoxIcon, {});\nconst Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCheckbox'\n  });\n  const {\n    checkedIcon = defaultCheckedIcon,\n    color = 'primary',\n    icon: iconProp = defaultIcon,\n    indeterminate = false,\n    indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,\n    inputProps,\n    size = 'medium',\n    disableRipple = false,\n    className,\n    slots = {},\n    slotProps = {},\n    ...other\n  } = props;\n  const icon = indeterminate ? indeterminateIconProp : iconProp;\n  const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;\n  const ownerState = {\n    ...props,\n    disableRipple,\n    color,\n    indeterminate,\n    size\n  };\n  const classes = useUtilityClasses(ownerState);\n  const externalInputProps = slotProps.input ?? inputProps;\n  const [RootSlot, rootSlotProps] = useSlot('root', {\n    ref,\n    elementType: CheckboxRoot,\n    className: clsx(classes.root, className),\n    shouldForwardComponentProp: true,\n    externalForwardedProps: {\n      slots,\n      slotProps,\n      ...other\n    },\n    ownerState,\n    additionalProps: {\n      type: 'checkbox',\n      icon: /*#__PURE__*/React.cloneElement(icon, {\n        fontSize: icon.props.fontSize ?? size\n      }),\n      checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {\n        fontSize: indeterminateIcon.props.fontSize ?? size\n      }),\n      disableRipple,\n      slots,\n      slotProps: {\n        input: mergeSlotProps(typeof externalInputProps === 'function' ? externalInputProps(ownerState) : externalInputProps, {\n          'data-indeterminate': indeterminate\n        })\n      }\n    }\n  });\n  return /*#__PURE__*/_jsx(RootSlot, {\n    ...rootSlotProps,\n    classes: classes\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   * @default <CheckBoxIcon />\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <CheckBoxOutlineBlankIcon />\n   */\n  icon: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the `input`.\n   * @default false\n   */\n  indeterminate: PropTypes.bool,\n  /**\n   * The icon to display when the component is indeterminate.\n   * @default <IndeterminateCheckBoxIcon />\n   */\n  indeterminateIcon: PropTypes.node,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#attributes) applied to the `input` element.\n   * @deprecated Use `slotProps.input` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense checkbox styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    input: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Checkbox;"],"names":["DsCheckbox","_ref","label","checked","onChange","disabled","id","name","color","size","_jsx","FormControlLabel","control","Checkbox","CheckboxPage","isChecked1","setIsChecked1","React","isChecked2","setIsChecked2","_jsxs","Box","sx","padding","children","Typography","variant","component","gutterBottom","mt","handleChange1","event","console","log","handleChange2","formControlState","props","states","muiFormControl","reduce","acc","state","useFormControl","FormControlContext","undefined","createSvgIcon","d","getCheckboxUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CheckboxRoot","styled","SwitchBase","shouldForwardProp","prop","rootShouldForwardProp","overridesResolver","styles","ownerState","root","indeterminate","concat","capitalize","memoTheme","theme","vars","palette","text","secondary","variants","disableRipple","style","backgroundColor","action","activeChannel","hoverOpacity","alpha","active","Object","entries","filter","createSimplePaletteValueFilter","map","_ref2","mainChannel","main","_ref3","checkboxClasses","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","inProps","ref","_slotProps$input","_icon$props$fontSize","_indeterminateIcon$pr","useDefaultProps","checkedIcon","icon","iconProp","indeterminateIcon","indeterminateIconProp","inputProps","className","slots","slotProps","other","_objectWithoutProperties","_objectSpread","classes","composedClasses","composeClasses","useUtilityClasses","externalInputProps","input","RootSlot","rootSlotProps","useSlot","elementType","clsx","shouldForwardComponentProp","externalForwardedProps","additionalProps","type","fontSize","mergeSlotProps"],"sourceRoot":""}