{"version":3,"file":"static/js/127.bd9693cd.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/esm/ListSubheader/listSubheaderClasses.js","../node_modules/@mui/material/esm/ListSubheader/ListSubheader.js","../node_modules/@mui/material/esm/Autocomplete/autocompleteClasses.js","../node_modules/@mui/material/esm/Autocomplete/Autocomplete.js","../node_modules/@mui/utils/esm/usePreviousProps/usePreviousProps.js","../node_modules/@mui/material/esm/useAutocomplete/useAutocomplete.js"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getListSubheaderUtilityClass(slot) {\n  return generateUtilityClass('MuiListSubheader', slot);\n}\nconst listSubheaderClasses = generateUtilityClasses('MuiListSubheader', ['root', 'colorPrimary', 'colorInherit', 'gutters', 'inset', 'sticky']);\nexport default listSubheaderClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport { getListSubheaderUtilityClass } from \"./listSubheaderClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    color,\n    disableGutters,\n    inset,\n    disableSticky\n  } = ownerState;\n  const slots = {\n    root: ['root', color !== 'default' && `color${capitalize(color)}`, !disableGutters && 'gutters', inset && 'inset', !disableSticky && 'sticky']\n  };\n  return composeClasses(slots, getListSubheaderUtilityClass, classes);\n};\nconst ListSubheaderRoot = styled('li', {\n  name: 'MuiListSubheader',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], !ownerState.disableGutters && styles.gutters, ownerState.inset && styles.inset, !ownerState.disableSticky && styles.sticky];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  boxSizing: 'border-box',\n  lineHeight: '48px',\n  listStyle: 'none',\n  color: (theme.vars || theme).palette.text.secondary,\n  fontFamily: theme.typography.fontFamily,\n  fontWeight: theme.typography.fontWeightMedium,\n  fontSize: theme.typography.pxToRem(14),\n  variants: [{\n    props: {\n      color: 'primary'\n    },\n    style: {\n      color: (theme.vars || theme).palette.primary.main\n    }\n  }, {\n    props: {\n      color: 'inherit'\n    },\n    style: {\n      color: 'inherit'\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => !ownerState.disableGutters,\n    style: {\n      paddingLeft: 16,\n      paddingRight: 16\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.inset,\n    style: {\n      paddingLeft: 72\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => !ownerState.disableSticky,\n    style: {\n      position: 'sticky',\n      top: 0,\n      zIndex: 1,\n      backgroundColor: (theme.vars || theme).palette.background.paper\n    }\n  }]\n})));\nconst ListSubheader = /*#__PURE__*/React.forwardRef(function ListSubheader(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiListSubheader'\n  });\n  const {\n    className,\n    color = 'default',\n    component = 'li',\n    disableGutters = false,\n    disableSticky = false,\n    inset = false,\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    color,\n    component,\n    disableGutters,\n    disableSticky,\n    inset\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(ListSubheaderRoot, {\n    as: component,\n    className: clsx(classes.root, className),\n    ref: ref,\n    ownerState: ownerState,\n    ...other\n  });\n});\nif (ListSubheader) {\n  ListSubheader.muiSkipListHighlight = true;\n}\nprocess.env.NODE_ENV !== \"production\" ? ListSubheader.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'default'\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the List Subheader will not have gutters.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n  /**\n   * If `true`, the List Subheader will not stick to the top during scroll.\n   * @default false\n   */\n  disableSticky: PropTypes.bool,\n  /**\n   * If `true`, the List Subheader is indented.\n   * @default false\n   */\n  inset: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default ListSubheader;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getAutocompleteUtilityClass(slot) {\n  return generateUtilityClass('MuiAutocomplete', slot);\n}\nconst autocompleteClasses = generateUtilityClasses('MuiAutocomplete', ['root', 'expanded', 'fullWidth', 'focused', 'focusVisible', 'tag', 'tagSizeSmall', 'tagSizeMedium', 'hasPopupIcon', 'hasClearIcon', 'inputRoot', 'input', 'inputFocused', 'endAdornment', 'clearIndicator', 'popupIndicator', 'popupIndicatorOpen', 'popper', 'popperDisablePortal', 'paper', 'listbox', 'loading', 'noOptions', 'option', 'groupLabel', 'groupUl']);\nexport default autocompleteClasses;","'use client';\n\nvar _ClearIcon, _ArrowDropDownIcon;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport integerPropType from '@mui/utils/integerPropType';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport useAutocomplete, { createFilterOptions } from \"../useAutocomplete/index.js\";\nimport Popper from \"../Popper/index.js\";\nimport ListSubheader from \"../ListSubheader/index.js\";\nimport Paper from \"../Paper/index.js\";\nimport IconButton from \"../IconButton/index.js\";\nimport Chip from \"../Chip/index.js\";\nimport inputClasses from \"../Input/inputClasses.js\";\nimport inputBaseClasses from \"../InputBase/inputBaseClasses.js\";\nimport outlinedInputClasses from \"../OutlinedInput/outlinedInputClasses.js\";\nimport filledInputClasses from \"../FilledInput/filledInputClasses.js\";\nimport ClearIcon from \"../internal/svg-icons/Close.js\";\nimport ArrowDropDownIcon from \"../internal/svg-icons/ArrowDropDown.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport autocompleteClasses, { getAutocompleteUtilityClass } from \"./autocompleteClasses.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport useSlot from \"../utils/useSlot.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', expanded && 'expanded', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\n    inputRoot: ['inputRoot'],\n    input: ['input', inputFocused && 'inputFocused'],\n    tag: ['tag', `tagSize${capitalize(size)}`],\n    endAdornment: ['endAdornment'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\n    paper: ['paper'],\n    listbox: ['listbox'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    option: ['option'],\n    groupLabel: ['groupLabel'],\n    groupUl: ['groupUl']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\n};\nconst AutocompleteRoot = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      fullWidth,\n      hasClearIcon,\n      hasPopupIcon,\n      inputFocused,\n      size\n    } = ownerState;\n    return [{\n      [`& .${autocompleteClasses.tag}`]: styles.tag\n    }, {\n      [`& .${autocompleteClasses.tag}`]: styles[`tagSize${capitalize(size)}`]\n    }, {\n      [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot\n    }, {\n      [`& .${autocompleteClasses.input}`]: styles.input\n    }, {\n      [`& .${autocompleteClasses.input}`]: inputFocused && styles.inputFocused\n    }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];\n  }\n})({\n  [`&.${autocompleteClasses.focused} .${autocompleteClasses.clearIndicator}`]: {\n    visibility: 'visible'\n  },\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    }\n  },\n  [`& .${autocompleteClasses.tag}`]: {\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)'\n  },\n  [`& .${autocompleteClasses.inputRoot}`]: {\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      width: 0,\n      minWidth: 30\n    }\n  },\n  [`& .${inputClasses.root}`]: {\n    paddingBottom: 1,\n    '& .MuiInput-input': {\n      padding: '4px 4px 4px 0px'\n    }\n  },\n  [`& .${inputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${inputClasses.input}`]: {\n      padding: '2px 4px 3px 0'\n    }\n  },\n  [`& .${outlinedInputClasses.root}`]: {\n    padding: 9,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '7.5px 4px 7.5px 5px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${outlinedInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    // Don't specify paddingRight, as it overrides the default value set when there is only\n    // one of the popup or clear icon as the specificity is equal so the latter one wins\n    paddingTop: 6,\n    paddingBottom: 6,\n    paddingLeft: 6,\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '2.5px 4px 2.5px 8px'\n    }\n  },\n  [`& .${filledInputClasses.root}`]: {\n    paddingTop: 19,\n    paddingLeft: 8,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${filledInputClasses.input}`]: {\n      padding: '7px 4px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    paddingBottom: 1,\n    [`& .${filledInputClasses.input}`]: {\n      padding: '2.5px 4px'\n    }\n  },\n  [`& .${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 8\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 0,\n    paddingBottom: 0,\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 16,\n      paddingBottom: 17\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 8,\n      paddingBottom: 9\n    }\n  },\n  [`& .${autocompleteClasses.input}`]: {\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0\n  },\n  variants: [{\n    props: {\n      fullWidth: true\n    },\n    style: {\n      width: '100%'\n    }\n  }, {\n    props: {\n      size: 'small'\n    },\n    style: {\n      [`& .${autocompleteClasses.tag}`]: {\n        margin: 2,\n        maxWidth: 'calc(100% - 4px)'\n      }\n    }\n  }, {\n    props: {\n      inputFocused: true\n    },\n    style: {\n      [`& .${autocompleteClasses.input}`]: {\n        opacity: 1\n      }\n    }\n  }, {\n    props: {\n      multiple: true\n    },\n    style: {\n      [`& .${autocompleteClasses.inputRoot}`]: {\n        flexWrap: 'wrap'\n      }\n    }\n  }]\n});\nconst AutocompleteEndAdornment = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'EndAdornment'\n})({\n  // We use a position absolute to support wrapping tags.\n  position: 'absolute',\n  right: 0,\n  top: '50%',\n  transform: 'translate(0, -50%)'\n});\nconst AutocompleteClearIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'ClearIndicator'\n})({\n  marginRight: -2,\n  padding: 4,\n  visibility: 'hidden'\n});\nconst AutocompletePopupIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.popupIndicator, ownerState.popupOpen && styles.popupIndicatorOpen];\n  }\n})({\n  padding: 2,\n  marginRight: -2,\n  variants: [{\n    props: {\n      popupOpen: true\n    },\n    style: {\n      transform: 'rotate(180deg)'\n    }\n  }]\n});\nconst AutocompletePopper = styled(Popper, {\n  name: 'MuiAutocomplete',\n  slot: 'Popper',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${autocompleteClasses.option}`]: styles.option\n    }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  zIndex: (theme.vars || theme).zIndex.modal,\n  variants: [{\n    props: {\n      disablePortal: true\n    },\n    style: {\n      position: 'absolute'\n    }\n  }]\n})));\nconst AutocompletePaper = styled(Paper, {\n  name: 'MuiAutocomplete',\n  slot: 'Paper'\n})(memoTheme(({\n  theme\n}) => ({\n  ...theme.typography.body1,\n  overflow: 'auto'\n})));\nconst AutocompleteLoading = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Loading'\n})(memoTheme(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n})));\nconst AutocompleteNoOptions = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'NoOptions'\n})(memoTheme(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n})));\nconst AutocompleteListbox = styled('ul', {\n  name: 'MuiAutocomplete',\n  slot: 'Listbox'\n})(memoTheme(({\n  theme\n}) => ({\n  listStyle: 'none',\n  margin: 0,\n  padding: '8px 0',\n  maxHeight: '40vh',\n  overflow: 'auto',\n  position: 'relative',\n  [`& .${autocompleteClasses.option}`]: {\n    minHeight: 48,\n    display: 'flex',\n    overflow: 'hidden',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    cursor: 'pointer',\n    paddingTop: 6,\n    boxSizing: 'border-box',\n    outline: '0',\n    WebkitTapHighlightColor: 'transparent',\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto'\n    },\n    [`&.${autocompleteClasses.focused}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&[aria-disabled=\"true\"]': {\n      opacity: (theme.vars || theme).palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    },\n    [`&.${autocompleteClasses.focusVisible}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.focus\n    },\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n      [`&.${autocompleteClasses.focused}`]: {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: (theme.vars || theme).palette.action.selected\n        }\n      },\n      [`&.${autocompleteClasses.focusVisible}`]: {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n      }\n    }\n  }\n})));\nconst AutocompleteGroupLabel = styled(ListSubheader, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupLabel'\n})(memoTheme(({\n  theme\n}) => ({\n  backgroundColor: (theme.vars || theme).palette.background.paper,\n  top: -8\n})));\nconst AutocompleteGroupUl = styled('ul', {\n  name: 'MuiAutocomplete',\n  slot: 'GroupUl'\n})({\n  padding: 0,\n  [`& .${autocompleteClasses.option}`]: {\n    paddingLeft: 24\n  }\n});\nexport { createFilterOptions };\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiAutocomplete'\n  });\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  const {\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    ChipProps: ChipPropsProp,\n    className,\n    clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\n      fontSize: \"small\"\n    })),\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    clearText = 'Clear',\n    closeText = 'Close',\n    componentsProps,\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled = false,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    disablePortal = false,\n    filterOptions,\n    filterSelectedOptions = false,\n    forcePopupIcon = 'auto',\n    freeSolo = false,\n    fullWidth = false,\n    getLimitTagsText = more => `+${more}`,\n    getOptionDisabled,\n    getOptionKey,\n    getOptionLabel: getOptionLabelProp,\n    isOptionEqualToValue,\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    limitTags = -1,\n    ListboxComponent: ListboxComponentProp,\n    ListboxProps: ListboxPropsProp,\n    loading = false,\n    loadingText = 'Loading…',\n    multiple = false,\n    noOptionsText = 'No options',\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open,\n    openOnFocus = false,\n    openText = 'Open',\n    options,\n    PaperComponent: PaperComponentProp,\n    PopperComponent: PopperComponentProp,\n    popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\n    readOnly = false,\n    renderGroup: renderGroupProp,\n    renderInput,\n    renderOption: renderOptionProp,\n    renderTags,\n    renderValue,\n    selectOnFocus = !props.freeSolo,\n    size = 'medium',\n    slots = {},\n    slotProps = {},\n    value: valueProp,\n    ...other\n  } = props;\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getItemProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    expanded,\n    id,\n    popupOpen,\n    focused,\n    focusedItem,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete({\n    ...props,\n    componentName: 'Autocomplete'\n  });\n  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  const {\n    onMouseDown: handleInputMouseDown\n  } = getInputProps();\n  const {\n    ref: listboxRef,\n    ...otherListboxProps\n  } = getListboxProps();\n  const defaultGetOptionLabel = option => option.label ?? option;\n  const getOptionLabel = getOptionLabelProp || defaultGetOptionLabel;\n\n  // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.\n  const ownerState = {\n    ...props,\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    getOptionLabel,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedItem === -1,\n    popupOpen,\n    size\n  };\n  const classes = useUtilityClasses(ownerState);\n  const externalForwardedProps = {\n    slots: {\n      paper: PaperComponentProp,\n      popper: PopperComponentProp,\n      ...slots\n    },\n    slotProps: {\n      chip: ChipPropsProp,\n      listbox: ListboxPropsProp,\n      ...componentsProps,\n      ...slotProps\n    }\n  };\n  const [ListboxSlot, listboxProps] = useSlot('listbox', {\n    elementType: AutocompleteListbox,\n    externalForwardedProps,\n    ownerState,\n    className: classes.listbox,\n    additionalProps: otherListboxProps,\n    ref: listboxRef\n  });\n  const [PaperSlot, paperProps] = useSlot('paper', {\n    elementType: Paper,\n    externalForwardedProps,\n    ownerState,\n    className: classes.paper\n  });\n  const [PopperSlot, popperProps] = useSlot('popper', {\n    elementType: Popper,\n    externalForwardedProps,\n    ownerState,\n    className: classes.popper,\n    additionalProps: {\n      disablePortal,\n      style: {\n        width: anchorEl ? anchorEl.clientWidth : null\n      },\n      role: 'presentation',\n      anchorEl,\n      open: popupOpen\n    }\n  });\n  let startAdornment;\n  const getCustomizedItemProps = params => ({\n    className: classes.tag,\n    disabled,\n    ...getItemProps(params)\n  });\n  if (multiple) {\n    if (value.length > 0) {\n      if (renderTags) {\n        startAdornment = renderTags(value, getCustomizedItemProps, ownerState);\n      } else if (renderValue) {\n        startAdornment = renderValue(value, getCustomizedItemProps, ownerState);\n      } else {\n        startAdornment = value.map((option, index) => {\n          const {\n            key,\n            ...customItemProps\n          } = getCustomizedItemProps({\n            index\n          });\n          return /*#__PURE__*/_jsx(Chip, {\n            label: getOptionLabel(option),\n            size: size,\n            ...customItemProps,\n            ...externalForwardedProps.slotProps.chip\n          }, key);\n        });\n      }\n    }\n  } else if (renderValue && value != null) {\n    startAdornment = renderValue(value, getCustomizedItemProps, ownerState);\n  }\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push(/*#__PURE__*/_jsx(\"span\", {\n        className: classes.tag,\n        children: getLimitTagsText(more)\n      }, startAdornment.length));\n    }\n  }\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\n      className: classes.groupLabel,\n      ownerState: ownerState,\n      component: \"div\",\n      children: params.group\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\n      className: classes.groupUl,\n      ownerState: ownerState,\n      children: params.children\n    })]\n  }, params.key);\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n  const defaultRenderOption = (props2, option) => {\n    // Need to clearly apply key because of https://github.com/vercel/next.js/issues/55642\n    const {\n      key,\n      ...otherProps\n    } = props2;\n    return /*#__PURE__*/_jsx(\"li\", {\n      ...otherProps,\n      children: getOptionLabel(option)\n    }, key);\n  };\n  const renderOption = renderOptionProp || defaultRenderOption;\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption({\n      ...optionProps,\n      className: classes.option\n    }, option, {\n      selected: optionProps['aria-selected'],\n      index,\n      inputValue\n    }, ownerState);\n  };\n  const clearIndicatorSlotProps = externalForwardedProps.slotProps.clearIndicator;\n  const popupIndicatorSlotProps = externalForwardedProps.slotProps.popupIndicator;\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, {\n      ref: ref,\n      className: clsx(classes.root, className),\n      ownerState: ownerState,\n      ...getRootProps(other),\n      children: renderInput({\n        id,\n        disabled,\n        fullWidth: true,\n        size: size === 'small' ? 'small' : undefined,\n        InputLabelProps: getInputLabelProps(),\n        InputProps: {\n          ref: setAnchorEl,\n          className: classes.inputRoot,\n          startAdornment,\n          onMouseDown: event => {\n            if (event.target === event.currentTarget) {\n              handleInputMouseDown(event);\n            }\n          },\n          ...((hasClearIcon || hasPopupIcon) && {\n            endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\n              className: classes.endAdornment,\n              ownerState: ownerState,\n              children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, {\n                ...getClearProps(),\n                \"aria-label\": clearText,\n                title: clearText,\n                ownerState: ownerState,\n                ...clearIndicatorSlotProps,\n                className: clsx(classes.clearIndicator, clearIndicatorSlotProps?.className),\n                children: clearIcon\n              }) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, {\n                ...getPopupIndicatorProps(),\n                disabled: disabled,\n                \"aria-label\": popupOpen ? closeText : openText,\n                title: popupOpen ? closeText : openText,\n                ownerState: ownerState,\n                ...popupIndicatorSlotProps,\n                className: clsx(classes.popupIndicator, popupIndicatorSlotProps?.className),\n                children: popupIcon\n              }) : null]\n            })\n          })\n        },\n        inputProps: {\n          className: classes.input,\n          disabled,\n          readOnly,\n          ...getInputProps()\n        }\n      })\n    }), anchorEl ? /*#__PURE__*/_jsx(AutocompletePopper, {\n      as: PopperSlot,\n      ...popperProps,\n      children: /*#__PURE__*/_jsxs(AutocompletePaper, {\n        as: PaperSlot,\n        ...paperProps,\n        children: [loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(AutocompleteLoading, {\n          className: classes.loading,\n          ownerState: ownerState,\n          children: loadingText\n        }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(AutocompleteNoOptions, {\n          className: classes.noOptions,\n          ownerState: ownerState,\n          role: \"presentation\",\n          onMouseDown: event => {\n            // Prevent input blur when interacting with the \"no options\" content\n            event.preventDefault();\n          },\n          children: noOptionsText\n        }) : null, groupedOptions.length > 0 ? /*#__PURE__*/_jsx(ListboxSlot, {\n          as: ListboxComponentProp,\n          ...listboxProps,\n          children: groupedOptions.map((option, index) => {\n            if (groupBy) {\n              return renderGroup({\n                key: option.key,\n                group: option.group,\n                children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n              });\n            }\n            return renderListOption(option, index);\n          })\n        }) : null]\n      })\n    }) : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the portion of the selected suggestion that the user hasn't typed,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   *\n   * When using the `freeSolo` mode, the typed value will be the input value\n   * if the Autocomplete loses focus without highlighting an option.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n  /**\n   * Props applied to the [`Chip`](https://mui.com/material-ui/api/chip/) element.\n   * @deprecated Use `slotProps.chip` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  ChipProps: PropTypes.object,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon: PropTypes.node,\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set it to `true` if you want to help the user enter a new value.\n   * Set it to `false` if you want to help the user resume their search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n  /**\n   * The props used for each slot inside.\n   * @deprecated Use the `slotProps` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  componentsProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n  /**\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n  /**\n   * A function that determines the filtered options to be rendered on search.\n   *\n   * @default createFilterOptions()\n   * @param {Value[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {Value[]}\n   */\n  filterOptions: PropTypes.func,\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {Value} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n  /**\n   * Used to determine the key for a given option.\n   * This can be useful when the labels of options are not unique (since labels are used as keys by default).\n   *\n   * @param {Value} option The option to get the key for.\n   * @returns {string | number}\n   */\n  getOptionKey: PropTypes.func,\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * If used in free solo mode, it must accept both the type of the options and a string.\n   *\n   * @param {Value} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {Value} option The Autocomplete option.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide an id it will fall back to a randomly generated one.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n  /**\n   * Used to determine if the option represents the given value.\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {Value} option The option to test.\n   * @param {Value} value The value to test against.\n   * @returns {boolean}\n   */\n  isOptionEqualToValue: PropTypes.func,\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   * @deprecated Use `slotProps.listbox.component` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  ListboxComponent: PropTypes.elementType,\n  /**\n   * Props applied to the Listbox element.\n   * @deprecated Use `slotProps.listbox` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  ListboxProps: PropTypes.object,\n  /**\n   * If `true`, the component is in a loading state.\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value|Value[]} value The new value of the component.\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"mouse\"`, `\"touch\"`.\n   */\n  onHighlightChange: PropTypes.func,\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`, `\"blur\"`, `\"selectOption\"`, `\"removeOption\"`\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n  /**\n   * A list of options that will be shown in the Autocomplete.\n   */\n  options: PropTypes.array.isRequired,\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   * @deprecated Use `slots.paper` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  PaperComponent: PropTypes.elementType,\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   * @deprecated Use `slots.popper` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  PopperComponent: PropTypes.elementType,\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n  /**\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Render the group.\n   *\n   * @param {AutocompleteRenderGroupParams} params The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n  /**\n   * Render the input.\n   *\n   * **Note:** The `renderInput` prop must return a `TextField` component or a compatible custom component\n   * that correctly forwards `InputProps.ref` and spreads `inputProps`. This ensures proper integration\n   * with the Autocomplete's internal logic (e.g., focus management and keyboard navigation).\n   *\n   * Avoid using components like `DatePicker` or `Select` directly, as they may not forward the required props,\n   * leading to runtime errors or unexpected behavior.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {Value} option The option to render.\n   * @param {object} state The state of each option.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n  /**\n   * Render the selected value when doing multiple selections.\n   *\n   * @deprecated Use `renderValue` prop instead\n   *\n   * @param {Value[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n  /**\n   * Renders the selected value(s) as rich content in the input for both single and multiple selections.\n   *\n   * @param {AutocompleteRenderValue<Value, Multiple, FreeSolo>} value The `value` provided to the component.\n   * @param {function} getItemProps The value item props.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderValue: PropTypes.func,\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    chip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    clearIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    paper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popupIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    listbox: PropTypes.elementType,\n    paper: PropTypes.elementType,\n    popper: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n    return null;\n  })\n} : void 0;\nexport default Autocomplete;","'use client';\n\nimport * as React from 'react';\nconst usePreviousProps = value => {\n  const ref = React.useRef({});\n  React.useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\nexport default usePreviousProps;","'use client';\n\nimport * as React from 'react';\nimport setRef from '@mui/utils/setRef';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useControlled from '@mui/utils/useControlled';\nimport useId from '@mui/utils/useId';\nimport usePreviousProps from '@mui/utils/usePreviousProps';\n\n// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\nfunction stripDiacritics(string) {\n  return string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\nexport function createFilterOptions(config = {}) {\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = 'any',\n    stringify,\n    trim = false\n  } = config;\n  return (options, {\n    inputValue,\n    getOptionLabel\n  }) => {\n    let input = trim ? inputValue.trim() : inputValue;\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n    const filteredOptions = !input ? options : options.filter(option => {\n      let candidate = (stringify || getOptionLabel)(option);\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n      return matchFrom === 'start' ? candidate.startsWith(input) : candidate.includes(input);\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n}\nconst defaultFilterOptions = createFilterOptions();\n\n// Number of options to jump in list box when `Page Up` and `Page Down` keys are used.\nconst pageSize = 5;\nconst defaultIsActiveElementInListbox = listboxRef => listboxRef.current !== null && listboxRef.current.parentElement?.contains(document.activeElement);\nconst MULTIPLE_DEFAULT_VALUE = [];\nfunction getInputValue(value, multiple, getOptionLabel, renderValue) {\n  if (multiple || value == null || renderValue) {\n    return '';\n  }\n  const optionLabel = getOptionLabel(value);\n  return typeof optionLabel === 'string' ? optionLabel : '';\n}\nfunction useAutocomplete(props) {\n  const {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_classNamePrefix = 'Mui',\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = 'useAutocomplete',\n    defaultValue = props.multiple ? MULTIPLE_DEFAULT_VALUE : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled: disabledProp,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionKey,\n    getOptionLabel: getOptionLabelProp = option => option.label ?? option,\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    isOptionEqualToValue = (option, value) => option === value,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    readOnly = false,\n    renderValue,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = useId(idProp);\n  let getOptionLabel = getOptionLabelProp;\n  getOptionLabel = option => {\n    const optionLabel = getOptionLabelProp(option);\n    if (typeof optionLabel !== 'string') {\n      if (process.env.NODE_ENV !== 'production') {\n        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`MUI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n      return String(optionLabel);\n    }\n    return optionLabel;\n  };\n  const ignoreFocus = React.useRef(false);\n  const firstFocus = React.useRef(true);\n  const inputRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [focusedItem, setFocusedItem] = React.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React.useRef(defaultHighlighted);\n\n  // Calculate the initial inputValue on mount only.\n  // useRef ensures it doesn't update dynamically with defaultValue or value props.\n  const initialInputValue = React.useRef(getInputValue(defaultValue ?? valueProp, multiple, getOptionLabel)).current;\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = useControlled({\n    controlled: inputValueProp,\n    default: initialInputValue,\n    name: componentName,\n    state: 'inputValue'\n  });\n  const [focused, setFocused] = React.useState(false);\n  const resetInputValue = React.useCallback((event, newValue, reason) => {\n    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false\n    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item\n    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;\n    if (!isOptionSelected && !clearOnBlur) {\n      return;\n    }\n    const newInputValue = getInputValue(newValue, multiple, getOptionLabel, renderValue);\n    if (inputValue === newInputValue) {\n      return;\n    }\n    setInputValueState(newInputValue);\n    if (onInputChange) {\n      onInputChange(event, newInputValue, reason);\n    }\n  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value, renderValue]);\n  const [open, setOpenState] = useControlled({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: 'open'\n  });\n  const [inputPristine, setInputPristine] = React.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open && !readOnly;\n  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {\n      return false;\n    }\n    return true;\n  }),\n  // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel\n  }) : [];\n  const previousProps = usePreviousProps({\n    filteredOptions,\n    value,\n    inputValue\n  });\n  React.useEffect(() => {\n    const valueChange = value !== previousProps.value;\n    if (focused && !valueChange) {\n      return;\n    }\n\n    // Only reset the input's value when freeSolo if the component's value changes.\n    if (freeSolo && !valueChange) {\n      return;\n    }\n    resetInputValue(null, value, 'reset');\n  }, [value, resetInputValue, focused, previousProps.value, freeSolo]);\n  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;\n  const focusItem = useEventCallback(itemToFocus => {\n    if (itemToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      // Using `data-tag-index` for deprecated `renderTags`. Remove when `renderTags` is gone.\n      const indexType = renderValue ? 'data-item-index' : 'data-tag-index';\n      anchorEl.querySelector(`[${indexType}=\"${itemToFocus}\"]`).focus();\n    }\n  });\n\n  // Ensure the focusedItem is never inconsistent\n  React.useEffect(() => {\n    if (multiple && focusedItem > value.length - 1) {\n      setFocusedItem(-1);\n      focusItem(-1);\n    }\n  }, [value, multiple, focusedItem, focusItem]);\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index < 0 || index >= filteredOptions.length) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n      if (option && option.hasAttribute('tabindex') && !nextFocusDisabled) {\n        // The next option is available\n        return nextFocus;\n      }\n\n      // The next option is disabled, move to the next element.\n      // with looped index\n      if (direction === 'next') {\n        nextFocus = (nextFocus + 1) % filteredOptions.length;\n      } else {\n        nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;\n      }\n\n      // We end up with initial index, that means we don't have available options.\n      // All of them are disabled\n      if (nextFocus === index) {\n        return -1;\n      }\n    }\n  }\n  const setHighlightedIndex = useEventCallback(({\n    event,\n    index,\n    reason\n  }) => {\n    highlightedIndexRef.current = index;\n\n    // does the index exist?\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n    }\n    if (onHighlightChange && ['mouse', 'keyboard', 'touch'].includes(reason)) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n    const prev = listboxRef.current.querySelector(`[role=\"option\"].${unstable_classNamePrefix}-focused`);\n    if (prev) {\n      prev.classList.remove(`${unstable_classNamePrefix}-focused`);\n      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);\n    }\n    let listboxNode = listboxRef.current;\n    if (listboxRef.current.getAttribute('role') !== 'listbox') {\n      listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]');\n    }\n\n    // \"No results\"\n    if (!listboxNode) {\n      return;\n    }\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n    if (!option) {\n      return;\n    }\n    option.classList.add(`${unstable_classNamePrefix}-focused`);\n    if (reason === 'keyboard') {\n      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);\n    }\n\n    // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/WAI/content-assets/wai-aria-practices/patterns/combobox/examples/js/select-only.js\n    // In case of mouse clicks and touch (in mobile devices) we avoid scrolling the element and keep both behaviors same.\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse' && reason !== 'touch') {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = useEventCallback(({\n    event,\n    diff,\n    direction = 'next',\n    reason\n  }) => {\n    if (!popupOpen) {\n      return;\n    }\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n      if (diff === 'start') {\n        return 0;\n      }\n      if (diff === 'end') {\n        return maxIndex;\n      }\n      const newIndex = highlightedIndexRef.current + diff;\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n        return maxIndex;\n      }\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n        return 0;\n      }\n      return newIndex;\n    };\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    });\n\n    // Sync the content of the input with the highlighted option.\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option;\n\n        // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  const getPreviousHighlightedOptionIndex = () => {\n    const isSameValue = (value1, value2) => {\n      const label1 = value1 ? getOptionLabel(value1) : '';\n      const label2 = value2 ? getOptionLabel(value2) : '';\n      return label1 === label2;\n    };\n    if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {\n      const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n      if (previousHighlightedOption) {\n        return filteredOptions.findIndex(option => {\n          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n        });\n      }\n    }\n    return -1;\n  };\n  const syncHighlightedIndex = React.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    }\n\n    // Check if the previously highlighted option still exists in the updated filtered options list and if the value and inputValue haven't changed\n    // If it exists and the value and the inputValue haven't changed, just update its index, otherwise continue execution\n    const previousHighlightedOptionIndex = getPreviousHighlightedOptionIndex();\n    if (previousHighlightedOptionIndex !== -1) {\n      highlightedIndexRef.current = previousHighlightedOptionIndex;\n      return;\n    }\n    const valueItem = multiple ? value[0] : value;\n\n    // The popup is empty, reset\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n\n    // Synchronize the value with the highlighted index\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current];\n\n      // Keep the current highlighted index if possible\n      if (multiple && currentOption && value.findIndex(val => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n      const itemIndex = filteredOptions.findIndex(optionItem => isOptionEqualToValue(optionItem, valueItem));\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n      return;\n    }\n\n    // Prevent the highlighted index to leak outside the boundaries.\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    }\n\n    // Restore the focus to the previous index.\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    });\n    // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n  // Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length,\n  // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  const handleListboxRef = useEventCallback(node => {\n    setRef(listboxRef, node);\n    if (!node) {\n      return;\n    }\n    syncHighlightedIndex();\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {\n        if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') {\n          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (for example enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join('\\n'));\n        } else {\n          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\\n'));\n        }\n      }\n    }, [componentName]);\n  }\n  React.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n  const handleOpen = event => {\n    if (open) {\n      return;\n    }\n    setOpenState(true);\n    setInputPristine(true);\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n    setOpenState(false);\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n  const handleValue = (event, newValue, reason, details) => {\n    if (multiple) {\n      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {\n        return;\n      }\n    } else if (value === newValue) {\n      return;\n    }\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n    setValueState(newValue);\n  };\n  const isTouch = React.useRef(false);\n  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {\n    let reason = reasonProp;\n    let newValue = option;\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n      if (process.env.NODE_ENV !== 'production') {\n        const matches = newValue.filter(val => isOptionEqualToValue(option, val));\n        if (matches.length > 1) {\n          console.error([`MUI: The \\`isOptionEqualToValue\\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\\n'));\n        }\n      }\n      const itemIndex = newValue.findIndex(valueItem => isOptionEqualToValue(option, valueItem));\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n    resetInputValue(event, newValue, reason);\n    handleValue(event, newValue, reason, {\n      option\n    });\n    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {\n      handleClose(event, reason);\n    }\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n  function validItemIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n\n      // Using `data-tag-index` for deprecated `renderTags`. Remove when `renderTags` is removed.\n      const indexType = renderValue ? 'data-item-index' : 'data-tag-index';\n      const option = anchorEl.querySelector(`[${indexType}=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const handleFocusItem = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n    if (inputValue === '') {\n      handleClose(event, 'toggleInput');\n    }\n    let nextItem = focusedItem;\n    if (focusedItem === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextItem = value.length - 1;\n      }\n    } else {\n      nextItem += direction === 'next' ? 1 : -1;\n      if (nextItem < 0) {\n        nextItem = 0;\n      }\n      if (nextItem === value.length) {\n        nextItem = -1;\n      }\n    }\n    nextItem = validItemIndex(nextItem, direction);\n    setFocusedItem(nextItem);\n    focusItem(nextItem);\n  };\n  const handleClear = event => {\n    ignoreFocus.current = true;\n    setInputValueState('');\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n  const handleKeyDown = other => event => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (focusedItem !== -1 && !['ArrowLeft', 'ArrowRight'].includes(event.key)) {\n      setFocusedItem(-1);\n      focusItem(-1);\n    }\n\n    // Wait until IME is settled.\n    if (event.which !== 229) {\n      switch (event.key) {\n        case 'Home':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'start',\n              direction: 'next',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'End':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'end',\n              direction: 'previous',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'PageUp':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'PageDown':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowDown':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowUp':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowLeft':\n          if (!multiple && renderValue) {\n            focusItem(0);\n          } else {\n            handleFocusItem(event, 'previous');\n          }\n          break;\n        case 'ArrowRight':\n          if (!multiple && renderValue) {\n            focusItem(-1);\n          } else {\n            handleFocusItem(event, 'next');\n          }\n          break;\n        case 'Enter':\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n\n            // Avoid early form validation, let the end-users continue filling the form.\n            event.preventDefault();\n            if (disabled) {\n              return;\n            }\n            selectNewValue(event, option, 'selectOption');\n\n            // Move the selection to the end.\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              // Allow people to add new values before they submit the form.\n              event.preventDefault();\n            }\n            selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n          }\n          break;\n        case 'Escape':\n          if (popupOpen) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClose(event, 'escape');\n          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0 || renderValue)) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClear(event);\n          }\n          break;\n        case 'Backspace':\n          // Remove the value on the left of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0) {\n            const index = focusedItem === -1 ? value.length - 1 : focusedItem;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          if (!multiple && renderValue && !readOnly) {\n            setValueState(null);\n            focusItem(-1);\n          }\n          break;\n        case 'Delete':\n          // Remove the value on the right of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedItem !== -1) {\n            const index = focusedItem;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          if (!multiple && renderValue && !readOnly) {\n            setValueState(null);\n            focusItem(-1);\n          }\n          break;\n        default:\n      }\n    }\n  };\n  const handleFocus = event => {\n    setFocused(true);\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n  const handleBlur = event => {\n    // Ignore the event when using the scrollbar with IE11\n    if (unstable_isActiveElementInListbox(listboxRef)) {\n      inputRef.current.focus();\n      return;\n    }\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value, 'blur');\n    }\n    handleClose(event, 'blur');\n  };\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n  const handleOptionMouseMove = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    if (highlightedIndexRef.current !== index) {\n      setHighlightedIndex({\n        event,\n        index,\n        reason: 'mouse'\n      });\n    }\n  };\n  const handleOptionTouchStart = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'touch'\n    });\n    isTouch.current = true;\n  };\n  const handleOptionClick = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n  const handleItemDelete = index => event => {\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    handleValue(event, newValue, 'removeOption', {\n      option: value[index]\n    });\n  };\n  const handleSingleItemDelete = event => {\n    handleValue(event, null, 'removeOption', {\n      option: value\n    });\n  };\n  const handlePopupIndicator = event => {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  // Prevent input blur when interacting with the combobox\n  const handleMouseDown = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  };\n\n  // Focus the input when interacting with the combobox\n  const handleClick = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    inputRef.current.focus();\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n    firstFocus.current = false;\n  };\n  const handleInputMouseDown = event => {\n    if (!disabledProp && (inputValue === '' || !open)) {\n      handlePopupIndicator(event);\n    }\n  };\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    const indexBy = new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index) => {\n      const group = groupBy(option);\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`MUI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');\n            warn = true;\n          }\n          indexBy.set(group, true);\n        }\n        acc.push({\n          key: index,\n          index,\n          group,\n          options: [option]\n        });\n      }\n      return acc;\n    }, []);\n  }\n  if (disabledProp && focused) {\n    handleBlur();\n  }\n  return {\n    getRootProps: (other = {}) => ({\n      ...other,\n      onKeyDown: handleKeyDown(other),\n      onMouseDown: handleMouseDown,\n      onClick: handleClick\n    }),\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperatively so don't let react override\n      // only have an opinion about this when closed\n      'aria-activedescendant': popupOpen ? '' : null,\n      'aria-autocomplete': autoComplete ? 'both' : 'list',\n      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,\n      'aria-expanded': listboxAvailable,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: 'off',\n      ref: inputRef,\n      autoCapitalize: 'none',\n      spellCheck: 'false',\n      role: 'combobox',\n      disabled: disabledProp\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handleClear\n    }),\n    getItemProps: ({\n      index = 0\n    } = {}) => ({\n      ...(multiple && {\n        key: index\n      }),\n      ...(renderValue ? {\n        'data-item-index': index\n      } : {\n        'data-tag-index': index\n      }),\n      tabIndex: -1,\n      ...(!readOnly && {\n        onDelete: multiple ? handleItemDelete(index) : handleSingleItemDelete\n      })\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handlePopupIndicator\n    }),\n    // deprecated\n    getTagProps: ({\n      index\n    }) => ({\n      key: index,\n      'data-tag-index': index,\n      tabIndex: -1,\n      ...(!readOnly && {\n        onDelete: handleItemDelete(index)\n      })\n    }),\n    getListboxProps: () => ({\n      role: 'listbox',\n      id: `${id}-listbox`,\n      'aria-labelledby': `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: event => {\n        // Prevent blur\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: ({\n      index,\n      option\n    }) => {\n      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: getOptionKey?.(option) ?? getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: `${id}-option-${index}`,\n        onMouseMove: handleOptionMouseMove,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    expanded: popupOpen && anchorEl,\n    popupOpen,\n    focused: focused || focusedItem !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedItem,\n    // deprecated\n    focusedTag: focusedItem,\n    groupedOptions\n  };\n}\nexport default useAutocomplete;"],"names":["getListSubheaderUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","ListSubheaderRoot","styled","name","overridesResolver","props","styles","ownerState","root","color","concat","capitalize","disableGutters","gutters","inset","disableSticky","sticky","memoTheme","_ref","theme","boxSizing","lineHeight","listStyle","vars","palette","text","secondary","fontFamily","typography","fontWeight","fontWeightMedium","fontSize","pxToRem","variants","style","primary","main","_ref2","paddingLeft","paddingRight","_ref3","_ref4","position","top","zIndex","backgroundColor","background","paper","ListSubheader","React","inProps","ref","useDefaultProps","className","component","other","_objectWithoutProperties","_objectSpread","classes","slots","composeClasses","useUtilityClasses","_jsx","as","clsx","muiSkipListHighlight","getAutocompleteUtilityClass","_excluded2","_excluded3","_excluded4","_ClearIcon","_ArrowDropDownIcon","AutocompleteRoot","fullWidth","hasClearIcon","hasPopupIcon","inputFocused","size","autocompleteClasses","tag","inputRoot","input","focused","clearIndicator","visibility","margin","maxWidth","width","minWidth","inputClasses","paddingBottom","padding","inputBaseClasses","sizeSmall","outlinedInputClasses","endAdornment","right","paddingTop","filledInputClasses","hiddenLabel","flexGrow","textOverflow","opacity","multiple","flexWrap","AutocompleteEndAdornment","transform","AutocompleteClearIndicator","IconButton","marginRight","AutocompletePopupIndicator","popupIndicator","popupOpen","popupIndicatorOpen","AutocompletePopper","Popper","option","popper","disablePortal","popperDisablePortal","modal","AutocompletePaper","Paper","body1","overflow","AutocompleteLoading","AutocompleteNoOptions","AutocompleteListbox","_ref5","maxHeight","minHeight","display","justifyContent","alignItems","cursor","outline","WebkitTapHighlightColor","breakpoints","up","action","hover","disabledOpacity","pointerEvents","focusVisible","focus","mainChannel","selectedOpacity","alpha","hoverOpacity","selected","focusOpacity","AutocompleteGroupLabel","_ref6","AutocompleteGroupUl","autoComplete","autoHighlight","autoSelect","blurOnSelect","ChipProps","ChipPropsProp","clearIcon","ClearIcon","clearOnBlur","freeSolo","clearOnEscape","clearText","closeText","componentsProps","defaultValue","disableClearable","disableCloseOnSelect","disabled","disabledItemsFocusable","disableListWrap","filterOptions","filterSelectedOptions","forcePopupIcon","getLimitTagsText","more","getOptionDisabled","getOptionKey","getOptionLabel","getOptionLabelProp","isOptionEqualToValue","groupBy","handleHomeEndKeys","id","idProp","includeInputInList","inputValue","inputValueProp","limitTags","ListboxComponent","ListboxComponentProp","ListboxProps","ListboxPropsProp","loading","loadingText","noOptionsText","onChange","onClose","onHighlightChange","onInputChange","onOpen","open","openOnFocus","openText","options","PaperComponent","PaperComponentProp","PopperComponent","PopperComponentProp","popupIcon","ArrowDropDownIcon","readOnly","renderGroup","renderGroupProp","renderInput","renderOption","renderOptionProp","renderTags","renderValue","selectOnFocus","slotProps","value","valueProp","getRootProps","getInputProps","getInputLabelProps","getPopupIndicatorProps","getClearProps","getItemProps","getListboxProps","getOptionProps","dirty","expanded","focusedItem","anchorEl","setAnchorEl","groupedOptions","useAutocomplete","componentName","onMouseDown","handleInputMouseDown","_getListboxProps","listboxRef","otherListboxProps","_option$label","label","listbox","noOptions","groupLabel","groupUl","externalForwardedProps","chip","ListboxSlot","listboxProps","useSlot","elementType","additionalProps","PaperSlot","paperProps","PopperSlot","popperProps","clientWidth","role","startAdornment","getCustomizedItemProps","params","length","map","index","_getCustomizedItemPro","key","customItemProps","Chip","Array","isArray","splice","push","children","_jsxs","group","defaultRenderOption","props2","otherProps","renderListOption","optionProps","clearIndicatorSlotProps","popupIndicatorSlotProps","undefined","InputLabelProps","InputProps","event","target","currentTarget","title","inputProps","preventDefault","option2","index2","current","stripDiacritics","string","normalize","replace","defaultFilterOptions","config","arguments","ignoreAccents","ignoreCase","limit","matchFrom","stringify","trim","toLowerCase","filteredOptions","filter","candidate","startsWith","includes","slice","createFilterOptions","defaultIsActiveElementInListbox","_listboxRef$current$p","parentElement","contains","document","activeElement","MULTIPLE_DEFAULT_VALUE","getInputValue","optionLabel","unstable_isActiveElementInListbox","unstable_classNamePrefix","disabledProp","openProp","useId","String","ignoreFocus","firstFocus","inputRef","setFocusedItem","defaultHighlighted","highlightedIndexRef","initialInputValue","setValueState","useControlled","controlled","default","setInputValueState","state","setFocused","resetInputValue","newValue","reason","newInputValue","setOpenState","inputPristine","setInputPristine","inputValueIsSelectedValue","some","value2","previousProps","usePreviousProps","valueChange","listboxAvailable","focusItem","useEventCallback","itemToFocus","indexType","querySelector","setHighlightedIndex","removeAttribute","setAttribute","prev","classList","remove","listboxNode","getAttribute","scrollTop","add","scrollHeight","clientHeight","element","scrollBottom","elementBottom","offsetTop","offsetHeight","changeHighlightedIndex","diff","direction","nextIndex","nextFocus","nextFocusDisabled","hasAttribute","validOptionIndex","getNextIndex","maxIndex","newIndex","Math","abs","indexOf","setSelectionRange","syncHighlightedIndex","previousHighlightedOptionIndex","getPreviousHighlightedOptionIndex","every","val","i","value1","previousHighlightedOption","findIndex","isSameValue","valueItem","currentOption","itemIndex","optionItem","handleListboxRef","node","setRef","handleOpen","handleClose","handleValue","details","isTouch","selectNewValue","origin","ctrlKey","metaKey","blur","handleFocusItem","nextItem","validItemIndex","handleClear","handleKeyDown","onKeyDown","defaultMuiPrevented","which","stopPropagation","handleFocus","handleBlur","handleInputChange","handleOptionMouseMove","Number","handleOptionTouchStart","handleOptionClick","handleItemDelete","handleSingleItemDelete","handlePopupIndicator","handleMouseDown","handleClick","selectionEnd","selectionStart","select","Map","reduce","acc","onClick","htmlFor","onBlur","onFocus","autoCapitalize","spellCheck","tabIndex","type","onDelete","getTagProps","_getOptionKey","onMouseMove","onTouchStart","focusedTag"],"sourceRoot":""}