{"version":3,"file":"static/js/500.51a0e1cb.chunk.js","mappings":"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","sources":["components/typography/HeadlineL.tsx","components/typography/HeadlineM.tsx","components/typography/HeadlineS.tsx","components/typography/TitleL.tsx","components/typography/TitleM.tsx","components/typography/TitleS.tsx","components/typography/TitleXS.tsx","components/typography/BodyL.tsx","components/typography/BodyM.tsx","components/typography/BodyS.tsx","components/typography/BodyXS.tsx","components/input/DsAutoComplete.tsx","../node_modules/@mui/icons-material/esm/Check.js","pages/AutocompletePage.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Typography } from '@mui/material';\r\n\r\ntype HeadlineProps = {\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst HeadlineL = ({ children }: HeadlineProps) => {\r\n    return (\r\n        <Typography\r\n            sx={{\r\n                fontSize: '48px',\r\n                fontWeight: '700',\r\n                fontFamily: 'Pretendard',\r\n                lineHeight: 1.5,\r\n            }}\r\n        >\r\n            {children}\r\n        </Typography>\r\n    );\r\n};\r\n\r\nexport default HeadlineL;\r\n","import React from 'react';\r\nimport { Typography } from '@mui/material';\r\n\r\ntype HeadlineProps = {\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst HeadlineM = ({ children }: HeadlineProps) => {\r\n    return (\r\n        <Typography\r\n            sx={{\r\n                fontSize: '40px',\r\n                fontWeight: '700',\r\n                fontFamily: 'Pretendard',\r\n                lineHeight: 1.5,\r\n            }}\r\n        >\r\n            {children}\r\n        </Typography>\r\n    );\r\n};\r\n\r\nexport default HeadlineM;\r\n","import React from 'react';\r\nimport { Typography } from '@mui/material';\r\n\r\ntype HeadlineProps = {\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst HeadlineS = ({ children }: HeadlineProps) => {\r\n    return (\r\n        <Typography\r\n            sx={{\r\n                fontSize: '36px',\r\n                fontWeight: '700',\r\n                fontFamily: 'Pretendard',\r\n                lineHeight: 1.5,\r\n            }}\r\n        >\r\n            {children}\r\n        </Typography>\r\n    );\r\n};\r\n\r\nexport default HeadlineS;\r\n","import React from 'react';\r\nimport { Typography } from '@mui/material';\r\n\r\n// Props 타입 이름을 TitleLProps로 변경\r\ntype TitleLProps = {\r\n    children: React.ReactNode;\r\n};\r\n\r\n// 파라미터 타입도 TitleLProps로 변경\r\nconst TitleL = ({ children }: TitleLProps) => {\r\n    return (\r\n        <Typography\r\n            sx={{\r\n                fontSize: '30px',\r\n                fontWeight: '600',\r\n                fontFamily: 'Pretendard',\r\n                lineHeight: 1.5,\r\n            }}\r\n        >\r\n            {children}\r\n        </Typography>\r\n    );\r\n};\r\n\r\nexport default TitleL;","// src/components/typography/TitleM.tsx\r\nimport React from 'react';\r\nimport { Typography, TypographyProps } from '@mui/material';\r\nimport { Theme, SxProps } from '@mui/material/styles';\r\n\r\ninterface TitleMProps extends Omit<TypographyProps, 'variant'> {\r\n    // sx prop은 TypographyProps에 이미 포함되어 있습니다.\r\n}\r\n\r\nconst TitleM = ({ sx, children, ...rest }: TitleMProps) => {\r\n    const defaultSx: SxProps<Theme> = {\r\n        fontSize: '26px', // TitleM 고유 스타일\r\n        fontWeight: 600,   // TitleM 고유 스타일\r\n        fontFamily: (theme) => theme.typography.fontFamily, // theme.ts에서 fontFamily 참조\r\n        color: (theme) => theme.palette.text.primary, // theme.ts에서 색상 참조 (예시)\r\n        // ... 기타 TitleM 기본 스타일\r\n    };\r\n\r\n    return (\r\n        <Typography\r\n            {...rest}\r\n            sx={[defaultSx, ...(Array.isArray(sx) ? sx : [sx])]}\r\n        >\r\n            {children}\r\n        </Typography>\r\n    );\r\n};\r\n\r\nexport default TitleM;","import React from 'react';\r\nimport { Typography } from '@mui/material';\r\n\r\n// Props 타입 이름을 TitleSProps로 변경\r\ntype TitleSProps = {\r\n    children: React.ReactNode;\r\n};\r\n\r\n// 파라미터 타입도 TitleSProps로 변경\r\nconst TitleS = ({ children }: TitleSProps) => {\r\n    return (\r\n        <Typography\r\n            sx={{\r\n                fontSize: '24px',\r\n                fontWeight: '600',\r\n                fontFamily: 'Pretendard',\r\n                lineHeight: 1.5,\r\n            }}\r\n        >\r\n            {children}\r\n        </Typography>\r\n    );\r\n};\r\n\r\nexport default TitleS;","import React from 'react';\r\nimport { Typography } from '@mui/material';\r\n\r\n// Props 타입 이름을 TitleXSProps로 변경\r\ntype TitleXSProps = {\r\n    children: React.ReactNode;\r\n};\r\n\r\n// 파라미터 타입도 TitleXSProps로 변경\r\nconst TitleXS = ({ children }: TitleXSProps) => {\r\n    return (\r\n        <Typography\r\n            sx={{\r\n                fontSize: '20px',\r\n                fontWeight: '600',\r\n                fontFamily: 'Pretendard',\r\n                lineHeight: 1.5,\r\n            }}\r\n        >\r\n            {children}\r\n        </Typography>\r\n    );\r\n};\r\n\r\nexport default TitleXS;","import React from 'react';\r\nimport { Typography } from '@mui/material';\r\n\r\n// Props 타입 이름을 BodyLProps로 변경\r\ntype BodyLProps = {\r\n    children: React.ReactNode;\r\n};\r\n\r\n// 파라미터 타입도 BodyLProps로 변경\r\nconst BodyL = ({ children }: BodyLProps) => {\r\n    return (\r\n        <Typography\r\n            sx={{\r\n                fontSize: '20px',\r\n                fontWeight: '400',\r\n                fontFamily: 'Pretendard',\r\n                lineHeight: 1.5,\r\n            }}\r\n        >\r\n            {children}\r\n        </Typography>\r\n    );\r\n};\r\n\r\nexport default BodyL;","import React from 'react';\r\nimport { Typography } from '@mui/material';\r\n\r\n// Props 타입 이름을 BodyMProps로 변경\r\ntype BodyMProps = {\r\n    children: React.ReactNode;\r\n};\r\n\r\n// 파라미터 타입도 BodyMProps로 변경\r\nconst BodyM = ({ children }: BodyMProps) => {\r\n    return (\r\n        <Typography\r\n            sx={{\r\n                fontSize: '16px',\r\n                fontWeight: '400',\r\n                fontFamily: 'Pretendard',\r\n                lineHeight: 1.5,\r\n            }}\r\n        >\r\n            {children}\r\n        </Typography>\r\n    );\r\n};\r\n\r\nexport default BodyM;","import React from 'react';\r\nimport { Typography } from '@mui/material';\r\n\r\n// Props 타입 이름을 BodySProps로 변경\r\ntype BodySProps = {\r\n    children: React.ReactNode;\r\n};\r\n\r\n// 파라미터 타입도 BodySProps로 변경\r\nconst BodyS = ({ children }: BodySProps) => {\r\n    return (\r\n        <Typography\r\n            sx={{\r\n                fontSize: '14px',\r\n                fontWeight: '400',\r\n                fontFamily: 'Pretendard',\r\n                lineHeight: 1.5,\r\n            }}\r\n        >\r\n            {children}\r\n        </Typography>\r\n    );\r\n};\r\n\r\nexport default BodyS;","import React from 'react';\r\nimport { Typography } from '@mui/material';\r\n\r\n// Props 타입 이름을 BodyXSProps로 변경\r\ntype BodyXSProps = {\r\n    children: React.ReactNode;\r\n};\r\n\r\n// 파라미터 타입도 BodyXSProps로 변경\r\nconst BodyXS = ({ children }: BodyXSProps) => {\r\n    return (\r\n        <Typography\r\n            sx={{\r\n                fontSize: '12px',\r\n                fontWeight: '400',\r\n                fontFamily: 'Pretendard',\r\n                lineHeight: 1.5,\r\n            }}\r\n        >\r\n            {children}\r\n        </Typography>\r\n    );\r\n};\r\n\r\nexport default BodyXS;","// DsAutoComplete.tsx\r\nimport * as React from 'react';\r\nimport MuiAutocomplete, { AutocompleteProps as MuiAutocompleteProps } from '@mui/material/Autocomplete';\r\n\r\n/**\r\n * DsAutoComplete 컴포넌트의 Props 인터페이스입니다.\r\n * MUI Autocomplete의 모든 속성을 확장합니다.\r\n *\r\n * 제네릭 타입:\r\n * @template T 옵션의 타입입니다.\r\n * @template Multiple 다중 값 허용 여부입니다.\r\n * @template DisableClearable 지우기 버튼 비활성화 여부입니다.\r\n * @template FreeSolo 자유 입력 모드 활성화 여부입니다.\r\n */\r\nexport interface DsAutoCompleteProps<\r\n    T,\r\n    Multiple extends boolean | undefined,\r\n    DisableClearable extends boolean | undefined,\r\n    FreeSolo extends boolean | undefined,\r\n> extends MuiAutocompleteProps<T, Multiple, DisableClearable, FreeSolo> {\r\n    // 향후 디자인 시스템의 Autocomplete에 특화된 커스텀 props를 여기에 추가할 수 있습니다.\r\n    // 예시:\r\n    // dsVariant?: 'standard' | 'compact';\r\n}\r\n\r\n/**\r\n * DsAutoComplete는 MUI Autocomplete를 감싸는 커스텀 Autocomplete 컴포넌트입니다.\r\n * 디자인 시스템의 기본 구성 요소로 설계되었습니다.\r\n * 표준 MUI Autocomplete가 허용하는 모든 props를 허용합니다.\r\n *\r\n * 제네릭 타입:\r\n * @template T 옵션의 타입입니다.\r\n * @template Multiple 다중 값 허용 여부입니다.\r\n * @template DisableClearable 지우기 버튼 비활성화 여부입니다.\r\n * @template FreeSolo 자유 입력 모드 활성화 여부입니다.\r\n */\r\nconst DsAutoComplete = <\r\n    T,\r\n    Multiple extends boolean | undefined = undefined, // 컴포넌트로 쉽게 사용하기 위해 제네릭 기본값 설정\r\n    DisableClearable extends boolean | undefined = undefined,\r\n    FreeSolo extends boolean | undefined = undefined,\r\n>(\r\n    props: DsAutoCompleteProps<T, Multiple, DisableClearable, FreeSolo>,\r\n): React.ReactElement => {\r\n    // 기본 래퍼의 경우 모든 props를 MUI Autocomplete로 그대로 전달합니다.\r\n    // 만약 DsAutoCompleteProps에 커스텀 props를 정의했다면,\r\n    // 여기서 해당 props를 구조 분해하여 처리한 후 나머지를 MuiAutocomplete로 전달합니다.\r\n    // 예시: const { dsVariant, ...otherMuiProps } = props;\r\n\r\n    return (\r\n        <MuiAutocomplete<T, Multiple, DisableClearable, FreeSolo>\r\n            {...props} // 모든 props를 직접 전달\r\n        />\r\n    );\r\n};\r\n\r\nexport default DsAutoComplete;","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M9 16.17 4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"\n}), 'Check');","import TextField from '@mui/material/TextField';\r\nimport DsAutoComplete from '../components/input/DsAutoComplete'; // DsAutoComplete.tsx 파일 경로\r\nimport React from 'react'; // React import 추가\r\nimport { Box, Typography, Chip } from '@mui/material'; // Box, Typography, Chip for layout and tags\r\n\r\n// --- CustomizedHook Autocomplete Example Imports ---\r\nimport useAutocomplete from '@mui/material/useAutocomplete'; // AutocompleteGetTagProps는 Chip 사용 시 직접 필요 X\r\nimport CheckIcon from '@mui/icons-material/Check';\r\nimport {BodyS} from \"../components/typography\"; // Listbox 아이템 선택 표시에 사용 가능\r\n// CloseIcon은 Chip의 onDelete에서 자동으로 처리될 수 있음\r\n\r\n// styled와 autocompleteClasses는 커스텀 스타일링에 사용되었으므로 제거 가능\r\n// import { styled } from '@mui/material/styles';\r\n// import { autocompleteClasses } from '@mui/material/Autocomplete';\r\n\r\n// --- FilmOption interface (used by both examples) ---\r\ninterface FilmOptionType {\r\n    title: string;\r\n    year: number;\r\n}\r\n\r\n// --- Data for the first example ---\r\nconst topFilmsSimple: readonly FilmOptionType[] = [\r\n    { title: 'The Shawshank Redemption', year: 1994 },\r\n    { title: 'The Godfather', year: 1972 },\r\n];\r\n\r\n// --- Data for CustomizedHook Example (축소됨) ---\r\nconst top100Films: readonly FilmOptionType[] = [\r\n    { title: 'The Shawshank Redemption', year: 1994 },\r\n    { title: 'The Godfather', year: 1972 },\r\n    { title: 'The Godfather: Part II', year: 1974 },\r\n    { title: 'The Dark Knight', year: 2008 },\r\n    { title: '12 Angry Men', year: 1957 },\r\n    { title: \"Schindler's List\", year: 1993 },\r\n    { title: 'Pulp Fiction', year: 1994 },\r\n    { title: 'The Lord of the Rings: The Return of the King', year: 2003, },\r\n    { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n    { title: 'Fight Club', year: 1999 },\r\n    { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001, },\r\n    { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980, },\r\n    { title: 'Forrest Gump', year: 1994 },\r\n    { title: 'Inception', year: 2010 },\r\n];\r\n\r\n\r\n// --- CustomizedHook Autocomplete Component (기본 스타일로 변경) ---\r\nfunction CustomizedHookAutocomplete() {\r\n    const {\r\n        getRootProps,\r\n        // getInputLabelProps, // TextField의 label prop으로 대체\r\n        getInputProps,\r\n        getTagProps,\r\n        getListboxProps,\r\n        getOptionProps,\r\n        groupedOptions,\r\n        value,\r\n        // focused, // TextField가 자체적으로 포커스 스타일 관리\r\n        // setAnchorEl, // TextField가 Listbox 위치 관리 또는 Popper 사용 시 필요\r\n    } = useAutocomplete({\r\n        id: 'customized-hook-simplified-demo', // ID 변경\r\n        defaultValue: [top100Films[1]],\r\n        multiple: true,\r\n        options: top100Films,\r\n        getOptionLabel: (option) => option.title,\r\n        isOptionEqualToValue: (option, val) => option.title === val.title && option.year === val.year,\r\n        // freeSolo: true, // 필요에 따라 자유 입력 허용\r\n    });\r\n\r\n    // TextField에 전달할 getInputProps에서 color 및 size 속성 제외\r\n    const { color, size, ...otherInputProps } = getInputProps();\r\n\r\n    return (\r\n        <Box sx={{ width: 300, position: 'relative' }}> {/* Listbox를 위해 position: 'relative' 추가 */}\r\n            {/*\r\n                useAutocomplete 훅을 사용하면서 MUI TextField와 Chip으로 UI를 구성하는 것은\r\n                사실상 MUI Autocomplete 컴포넌트의 내부 동작을 일부 수동으로 구현하는 것과 유사해집니다.\r\n                가장 \"기본 스타일\"을 원한다면, DsAutoComplete (내부적으로 MUI Autocomplete 사용)를\r\n                활용하는 것이 더 간단하고 권장되는 방식입니다.\r\n\r\n                아래 코드는 useAutocomplete 훅의 각 prop getter를 MUI 기본 컴포넌트에\r\n                어떻게 연결할 수 있는지 보여주는 예시입니다.\r\n            */}\r\n            <div {...getRootProps()}>\r\n                {/* Label은 TextField의 label prop으로 대체 */}\r\n                <TextField\r\n                    fullWidth // Box 너비에 맞춤\r\n                    label=\"Customized Hook (Simplified)\" // getInputLabelProps() 대신 직접 설정\r\n                    {...otherInputProps} // color 및 size가 제외된 input props 전달\r\n                    InputProps={{ // TextField의 InputProps를 통해 태그 렌더링 및 ref 설정\r\n                        // ref: setAnchorEl, // Autocomplete가 Listbox 위치를 관리하도록 ref 연결 (Popper 사용 시)\r\n                        startAdornment: (\r\n                            // Chip들을 감싸는 Box에 flexWrap 적용\r\n                            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 /* theme.spacing(0.5) -> 4px */ }}>\r\n                                {value.map((option: FilmOptionType, index: number) => {\r\n                                    // getTagProps는 이미 key를 포함하므로, 여기서 key를 직접 지정하지 않습니다.\r\n                                    const tagPropsFromHook = getTagProps({ index });\r\n                                    return (\r\n                                        <Chip\r\n                                            {...tagPropsFromHook} // getTagProps에서 반환된 props (key 포함) 사용\r\n                                            label={option.title}\r\n                                            // onDelete는 tagPropsFromHook에 포함되어 있음\r\n                                            size=\"small\" // Chip 자체의 size prop\r\n                                            // style={{ margin: '2px' }} // gap으로 대체하여 삭제 또는 주석 처리\r\n                                            onClick={() => {\r\n                                                // Chip 몸통 클릭 시 오류 방지용 빈 핸들러 추가\r\n                                                // console.log('Chip clicked:', option.title); // 디버깅용\r\n                                            }}\r\n                                        />\r\n                                    );\r\n                                })}\r\n                            </Box>\r\n                        ),\r\n                    }}\r\n                />\r\n            </div>\r\n            {groupedOptions.length > 0 ? (\r\n                <Box component=\"ul\" {...getListboxProps()} sx={{\r\n                    listStyle: 'none',\r\n                    p: 0.5,\r\n                    m: 0,\r\n                    position: 'absolute', // 간단한 위치 조정 (실제로는 Popper 등 필요)\r\n                    bgcolor: 'background.paper',\r\n                    boxShadow: 1,\r\n                    maxHeight: 200,\r\n                    overflow: 'auto',\r\n                    zIndex: 1300, // 다른 요소 위에 오도록 zIndex 설정\r\n                    width: '100%', // 부모 Box 너비에 맞춤\r\n                }}>\r\n                    {(groupedOptions as FilmOptionType[]).map((option, index) => {\r\n                        // getOptionProps는 이미 key를 포함합니다.\r\n                        const optionPropsFromHook = getOptionProps({ option, index });\r\n                        return (\r\n                            <Box component=\"li\" {...optionPropsFromHook} sx={{ p: 1, display: 'flex', alignItems: 'center', cursor: 'pointer' }}>\r\n                                <Typography variant=\"body2\" component=\"span\" sx={{ flexGrow: 1 }}>\r\n                                    {option.title}\r\n                                </Typography>\r\n                                {/* 현재 선택된 값(value)과 현재 옵션(option)을 비교하여 CheckIcon 표시 */}\r\n                                {value.some(v => v.title === option.title && v.year === option.year) && (\r\n                                    <CheckIcon fontSize=\"small\" sx={{ ml: 1, color: 'primary.main' }} />\r\n                                )}\r\n                            </Box>\r\n                        );\r\n                    })}\r\n                </Box>\r\n            ) : null}\r\n        </Box>\r\n    );\r\n}\r\n\r\n\r\n// --- Main Page Component ---\r\nfunction AutocompletePage() {\r\n    return (\r\n        <Box sx={{ p: 3 }}>\r\n            <Typography variant=\"h1\" component=\"h1\" gutterBottom>\r\n                Autocomplete\r\n            </Typography>\r\n            <BodyS>Body S Pretendard Regular 14</BodyS>\r\n            <Box sx={{ mb: 4 }}>\r\n                <Typography variant=\"h6\" component=\"h2\" gutterBottom>\r\n                    DsAutoComplete (Basic Wrapper)\r\n                </Typography>\r\n                <DsAutoComplete<FilmOptionType, false, false, false>\r\n                    options={topFilmsSimple}\r\n                    getOptionLabel={(option) => option.title}\r\n                    sx={{ width: 300 }}\r\n                    renderInput={(params) => <TextField {...params} label=\"영화 선택 (DsAutoComplete)\" />}\r\n                />\r\n            </Box>\r\n\r\n            <Box>\r\n                <Typography variant=\"h6\" component=\"h2\" gutterBottom>\r\n                    Customized Hook Autocomplete (Simplified)\r\n                </Typography>\r\n                <CustomizedHookAutocomplete />\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default AutocompletePage;"],"names":["_ref","children","_jsx","Typography","sx","fontSize","fontWeight","fontFamily","lineHeight","rest","_objectWithoutProperties","_excluded","_objectSpread","theme","typography","color","palette","text","primary","Array","isArray","props","MuiAutocomplete","createSvgIcon","d","topFilmsSimple","title","year","top100Films","CustomizedHookAutocomplete","getRootProps","getInputProps","getTagProps","getListboxProps","getOptionProps","groupedOptions","value","useAutocomplete","id","defaultValue","multiple","options","getOptionLabel","option","isOptionEqualToValue","val","_getInputProps","size","otherInputProps","_jsxs","Box","width","position","TextField","fullWidth","label","InputProps","startAdornment","display","flexWrap","gap","map","index","tagPropsFromHook","Chip","onClick","length","component","listStyle","p","m","bgcolor","boxShadow","maxHeight","overflow","zIndex","optionPropsFromHook","alignItems","cursor","variant","flexGrow","some","v","CheckIcon","ml","gutterBottom","BodyS","mb","DsAutoComplete","renderInput","params"],"sourceRoot":""}