{"version":3,"file":"static/js/682.9bafa67f.chunk.js","mappings":"qSAmBe,SAASA,EAAYC,GAQwB,IARvB,MACIC,EAAK,SACLC,EAAQ,MACRC,EAAK,SACLC,EAAQ,QACRC,EAAO,QACPC,GAEgBN,EADbO,GAAKC,EAAAA,EAAAA,GAAAR,EAAAS,GAE7C,OACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAaC,UAC5CJ,EAAAA,EAAAA,KAACK,EAAAA,GAAUC,EAAAA,EAAAA,GAAA,CACPC,OAAO,aACPhB,MAAOA,EACPC,SAAUA,EACVC,MAAOA,EACPC,SAAUA,EACVC,QAASA,EACTC,QAASA,GACLC,KAIpB,C,gKCHA,SAASW,EAAmBX,GACxB,MAAM,MAAEN,GAAUM,EAClB,OACIG,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,KAAKC,GAAI,CAAEC,UAAW,SAAUC,MAAO,OAAQC,GAAI,GAAIV,SACtEb,EAAQA,EAAMgB,OAAO,sBAAc,IAGhD,CAvBAQ,IAAAA,OAAa,MAyFb,MA2JA,EA3J4DzB,IAKQ,IALP,MACIG,EAAQ,yCAAU,iBAClBuB,EAAmB,KAAI,eACvBC,EAAiB,KAAI,SACrBzB,GACHF,EAC1D,MAAO4B,EAAUC,IAAeC,EAAAA,EAAAA,UAAgC,OACzDC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAuBJ,IAC1DO,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAuBH,IACtDQ,EAAmBC,IAAwBN,EAAAA,EAAAA,UAAgBJ,GAAoBD,QAGtFY,EAAAA,EAAAA,YAAU,KACFT,IACAI,EAAiBN,GACjBQ,EAAeP,GACfS,EAAqBV,GAAoBD,UAE9C,CAACG,EAAUF,EAAkBC,IAEhC,MAAMW,EAAeC,IACjBV,EAAYU,EAAMC,gBAUhBC,EAAeA,KACjBZ,EAAY,OAGVa,EAAoBC,IACtB,GAAIZ,GAAiBE,EAGjB,OAFAD,EAAiBW,QACjBT,EAAe,MAIdH,EAKDA,IAAkBE,IACdU,GAAYA,EAASC,SAASb,EAAe,QAC7CG,EAAeH,GACfC,EAAiBW,IAEjBT,EAAeS,IATnBX,EAAiBW,IAcnBE,EAAOC,QAAQlB,GACfmB,EAAKF,EAAO,0BAAuBG,EAEnCC,GAAeC,EAAAA,EAAAA,UAAQ,IACrBxB,GAAoBC,EACd,GAANwB,OAAUzB,EAAiBT,OAAO,cAAa,OAAAkC,OAAMxB,EAAeV,OAAO,eAExE,IACR,CAACS,EAAkBC,IAEhByB,GAAWF,EAAAA,EAAAA,UAAQ,KAAMG,OA7HJC,EA6H0BvB,EA7HGwB,EA6HYtB,EA3H7D,SAAyB1B,GAC5B,MAAM,IAAEiD,EAAG,oBAAEC,GAAkClD,EAAVmD,GAAKlD,EAAAA,EAAAA,GAAKD,EAAKE,GAE9CkD,EAAUL,GAAiBE,EAAII,OAAON,EAAe,OACrDO,EAAQN,GAAeC,EAAII,OAAOL,EAAa,OAC/CO,EACFR,GACAC,GACAC,EAAIO,QAAQT,EAAe,QAC3BE,EAAIZ,SAASW,EAAa,OAExBS,EAAaL,GAAWE,EAExBI,EAA+B,CAEjCC,gBAAiBJ,EAAYK,GAASA,EAAMC,QAAQC,OAAOC,MAAQ,cACnEC,oBAAqBZ,GAAWG,EAAY,MAAQ,EACpDU,uBAAwBb,GAAWG,EAAY,MAAQ,EACvDW,qBAAsBZ,GAASC,EAAY,MAAQ,EACnDY,wBAAyBb,GAASC,EAAY,MAAQ,EACtDvC,MAAO,GACPoD,OAAQ,GACRC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAGdC,GAAwB/D,EAAAA,EAAAA,GAAA,GACtBgD,GAAc,CACdE,gBAAiB,eACjBc,MAAO,uBACP,UAAW,CACPd,gBAAiB,gBAErBe,aAAc,MACd1D,MAAO,GACPoD,OAAQ,KAIhB,OACIjE,EAAAA,EAAAA,KAACwE,EAAAA,EAAG,CAAC7D,GAAI4C,EAAanD,UAClBJ,EAAAA,EAAAA,KAACyE,EAAAA,GAAUnE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACPwC,IAAKA,EACLC,oBAAqBA,GACjBC,GAAK,IACTrC,GAAI0D,MAIpB,EApDJ,IAA+BzB,EAA6BC,IA6H0B,CAACxB,EAAeE,IAElG,OACImD,EAAAA,EAAAA,MAACzE,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAcwE,cAAc,KAAIvE,SAAA,EAC/DJ,EAAAA,EAAAA,KAAC4E,EAAAA,EAAY,CAACC,OAAQ,CAClB,+BAAgC,CAC5BhE,MAAO,GACPoD,OAAQ,GACRa,OAAQ,SACRZ,QAAS,OACTC,WAAY,SACZC,eAAgB,cAIxBpE,EAAAA,EAAAA,KAAC+E,EAAAA,EAAS,CACNC,WAAS,EACTvF,MAAOA,EACPF,MAAOgD,EACP0C,QAASrD,EACTjB,GAAI,CAAEuE,OAAQ,WACdC,WAAY,CACRC,UAAU,EACVC,cACIrF,EAAAA,EAAAA,KAACsF,EAAAA,EAAc,CAACC,SAAS,MAAKnF,UAC1BJ,EAAAA,EAAAA,KAACwF,EAAAA,EAAU,CACP,aAAW,sDACXP,QAASrD,EACT6D,KAAK,MAAKrF,UAEVJ,EAAAA,EAAAA,KAAC0F,EAAAA,EAAiB,YAMtC1F,EAAAA,EAAAA,KAAC2F,EAAAA,GAAO,CACJtD,GAAIA,EACJF,KAAMA,EACNjB,SAAUA,EACV0E,QAAS7D,EACT8D,aAAc,CACVC,SAAU,SACVC,WAAY,QAEhBC,gBAAiB,CACbF,SAAU,MACVC,WAAY,QACd3F,UAEFsE,EAAAA,EAAAA,MAACF,EAAAA,EAAG,CAAC7D,GAAI,CAAEsF,EAAG,EAAG/B,QAAS,OAAQgC,cAAe,UAAW9F,SAAA,EACxDsE,EAAAA,EAAAA,MAACyB,EAAAA,EAAK,CAACC,UAAU,MAAMC,QAAS,EAAG1F,GAAI,CAAE2F,SAAU,OAAQlC,eAAgB,UAAWhE,SAAA,EAClFJ,EAAAA,EAAAA,KAACwE,EAAAA,EAAG,CAAApE,UACAJ,EAAAA,EAAAA,KAACuG,EAAAA,EAAgB,CACbhH,MAAO8B,EACP7B,SAAUwC,EACVwE,cAAgBC,GAAa/E,EAAqB+E,GAClDC,MAAO,CACHC,UAAWA,IAAM,KACjBC,QAAU/G,IAAUG,EAAAA,EAAAA,KAACQ,GAAkBF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKT,GAAK,IAAEN,MAAOkC,KAC1DqB,IAAKJ,GAETmE,cAAepF,OAGvBzB,EAAAA,EAAAA,KAACwE,EAAAA,EAAG,CAAApE,UACAJ,EAAAA,EAAAA,KAACuG,EAAAA,EAAgB,CACbhH,MAAOgC,EACP/B,SAAUwC,EACV6E,cAAepF,EAAkBqF,IAAI,EAAG,SACxCJ,MAAO,CACHC,UAAWA,IAAM,KACjBC,QAAU/G,IAAUG,EAAAA,EAAAA,KAACQ,GAAkBF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKT,GAAK,IAAEN,MAAOkC,EAAkBqF,IAAI,EAAG,YACnFhE,IAAKJ,WAKrBgC,EAAAA,EAAAA,MAACyB,EAAAA,EAAK,CAACC,UAAU,MAAMhC,eAAe,WAAWiC,QAAS,EAAG1F,GAAI,CAAEoG,GAAI,GAAI3G,SAAA,EACvEJ,EAAAA,EAAAA,KAACgH,EAAAA,EAAM,CAAC/B,QAASlD,EAAa3B,SAAC,kBAC/BJ,EAAAA,EAAAA,KAACgH,EAAAA,EAAM,CAACtG,QAAQ,YAAYuE,QA3H1BgC,KAClB9F,EAAY,MACR3B,GACAA,EAAS6B,EAAeE,IAwHuCnB,SAAC,6BCvP7D,SAAS8G,IACpB,MAAOC,EAAiBC,IAAsBhG,EAAAA,EAAAA,UAAuBL,QAC9DsG,EAAeC,IAAoBlG,EAAAA,EAAAA,UAAuBL,IAAM,gBAEhEwG,EAAwBC,IAA6BpG,EAAAA,EAAAA,UAAuB,OAC5EqG,EAAsBC,IAA2BtG,EAAAA,EAAAA,UAAuB,MAO/E,OAEIpB,EAAAA,EAAAA,KAACC,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAaC,UAC5CsE,EAAAA,EAAAA,MAACF,EAAAA,EAAG,CAAC7D,GAAI,CAAEsF,EAAG,GAAI7F,SAAA,EACdJ,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,KAAKiH,cAAY,EAAAvH,SAAC,iBAGtCJ,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAAC6D,MAAM,iBAAiB3D,GAAI,CAAEiH,GAAI,GAAIxH,SAAC,kNAIlDsE,EAAAA,EAAAA,MAACyB,EAAAA,EAAK,CAACE,QAAS,EAAGD,UAAU,SAAQhG,SAAA,EAEjCsE,EAAAA,EAAAA,MAACF,EAAAA,EAAG,CAAApE,SAAA,EACAJ,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,KAAKiH,cAAY,EAAAvH,SAAC,gBAGtCJ,EAAAA,EAAAA,KAACX,EAAY,CACTI,MAAM,4BACNF,MAAO4H,EACP3H,SAAWyC,IACPmF,EAAmBnF,OAG3ByC,EAAAA,EAAAA,MAACjE,EAAAA,EAAU,CAACC,QAAQ,QAAQC,GAAI,CAAEoG,GAAI,GAAI3G,SAAA,CAAC,oCAC9B+G,EAAkBA,EAAgB5G,OAAO,cAAgB,sBAK1EmE,EAAAA,EAAAA,MAACF,EAAAA,EAAG,CAAApE,SAAA,EACAJ,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,KAAKiH,cAAY,EAAAvH,SAAC,cAGtCJ,EAAAA,EAAAA,KAACX,EAAY,CACTI,MAAM,8CACNF,MAAO8H,EACP7H,SAAWyC,GAA2BqF,EAAiBrF,GACvDvC,UAAQ,QAKhBgF,EAAAA,EAAAA,MAACF,EAAAA,EAAG,CAAApE,SAAA,EACAJ,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,KAAKiH,cAAY,EAAAvH,SAAC,eAGtCJ,EAAAA,EAAAA,KAACX,EAAY,CACTI,MAAM,kCACNF,MAAOwB,IAAM,cACbvB,SAAUA,aAKlBkF,EAAAA,EAAAA,MAACF,EAAAA,EAAG,CAAApE,SAAA,EACAJ,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,KAAKiH,cAAY,EAAAvH,SAAC,yDAItCJ,EAAAA,EAAAA,KAACwE,EAAAA,EAAG,CAAC7D,GAAI,CAAEE,MAAO,SAAUT,UACxBJ,EAAAA,EAAAA,KAAC6H,EAAiB,CACdpI,MAAM,4BACND,SApEFsI,CAACC,EAAyBC,KAChDR,EAA0BO,GAC1BL,EAAwBM,IAmEAhH,iBAAkBuG,EAClBtG,eAAgBwG,OAGxB/C,EAAAA,EAAAA,MAACjE,EAAAA,EAAU,CAACC,QAAQ,QAAQC,GAAI,CAAEoG,GAAI,GAAI3G,SAAA,CAAC,oCAC9BmH,EAAyBA,EAAuBhH,OAAO,cAAgB,eAAK,MAAIkH,EAAuBA,EAAqBlH,OAAO,cAAgB,4BAOxL,C","sources":["components/mui_x/date/DsDatePicker.tsx","components/mui_x/date/DsDateRangePicker.tsx","pages/DatePickerPage.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport { Dayjs } from 'dayjs';\r\n\r\ntype DsDatePickerProps = {\r\n    value: Dayjs | null;\r\n    onChange: (newValue: Dayjs | null) => void;\r\n    label?: string;\r\n    disabled?: boolean;\r\n    // --- 추가된 부분 ---\r\n    minDate?: Dayjs; // 최소 날짜 설정\r\n    maxDate?: Dayjs; // 최대 날짜 설정\r\n    // --- 추가된 부분 끝 ---\r\n    // DatePicker에 전달될 수 있는 다른 모든 prop을 허용합니다.\r\n    [key: string]: any;\r\n};\r\n\r\nexport default function DsDatePicker({\r\n                                         value,\r\n                                         onChange,\r\n                                         label,\r\n                                         disabled,\r\n                                         minDate, // 추가된 prop\r\n                                         maxDate, // 추가된 prop\r\n                                         ...props\r\n                                     }: DsDatePickerProps) {\r\n    return (\r\n        <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n            <DatePicker\r\n                format=\"YYYY.MM.DD\" // 한국식 날짜 형식 (년.월.일)\r\n                value={value}\r\n                onChange={onChange}\r\n                label={label}\r\n                disabled={disabled}\r\n                minDate={minDate} // 내부 DatePicker로 전달\r\n                maxDate={maxDate} // 내부 DatePicker로 전달\r\n                {...props}\r\n            />\r\n        </LocalizationProvider>\r\n    );\r\n}","import React, { useState, useEffect, useMemo } from 'react';\r\nimport {\r\n    Box,\r\n    Popover,\r\n    TextField,\r\n    Typography,\r\n    Stack,\r\n    Button,\r\n    InputAdornment,\r\n    IconButton,\r\n    SxProps,\r\n    Theme,\r\n    GlobalStyles,\r\n} from '@mui/material';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport { StaticDatePicker, PickersDay, PickersDayProps, DatePickerToolbarProps } from '@mui/x-date-pickers';\r\nimport { Dayjs } from 'dayjs';\r\nimport dayjs from 'dayjs';\r\nimport 'dayjs/locale/ko';\r\nimport CalendarMonthIcon from '@mui/icons-material/CalendarMonth';\r\n\r\n// dayjs의 로케일을 한국어로 설정합니다.\r\ndayjs.locale('ko');\r\n\r\n/**\r\n * DsDateRangePicker 컴포넌트의 Props 인터페이스\r\n */\r\ninterface DsDateRangePickerProps {\r\n    label?: string;\r\n    initialStartDate?: Dayjs | null;\r\n    initialEndDate?: Dayjs | null;\r\n    onChange?: (startDate: Dayjs | null, endDate: Dayjs | null) => void;\r\n}\r\n\r\n/**\r\n * 달력 상단의 헤더를 커스텀 렌더링하는 컴포넌트\r\n * DatePickerToolbarProps와 커스텀 value prop을 모두 받도록 타입을 정의합니다.\r\n */\r\nfunction CustomPickerHeader(props: DatePickerToolbarProps & { value: Dayjs | null }) {\r\n    const { value } = props;\r\n    return (\r\n        <Typography variant=\"h6\" sx={{ textAlign: 'center', width: '100%', py: 1 }}>\r\n            {value ? value.format('YYYY년 M월') : ''}\r\n        </Typography>\r\n    );\r\n}\r\n\r\n/**\r\n * 날짜 범위 스타일을 적용하기 위한 커스텀 Day 렌더링 함수를 생성하는 고차 함수\r\n * @param selectedStart 선택된 시작일\r\n * @param selectedEnd 선택된 종료일\r\n * @returns 커스텀 PickersDay 컴포넌트\r\n */\r\nfunction createRangePickersDay(selectedStart: Dayjs | null, selectedEnd: Dayjs | null) {\r\n    // ✅ [수정] PickersDayProps에서 제네릭 <Dayjs>를 제거합니다.\r\n    return function RangePickersDay(props: PickersDayProps): React.ReactElement {\r\n        const { day, outsideCurrentMonth, ...other } = props;\r\n\r\n        const isStart = selectedStart && day.isSame(selectedStart, 'day');\r\n        const isEnd = selectedEnd && day.isSame(selectedEnd, 'day');\r\n        const isBetween =\r\n            selectedStart &&\r\n            selectedEnd &&\r\n            day.isAfter(selectedStart, 'day') &&\r\n            day.isBefore(selectedEnd, 'day');\r\n\r\n        const isSelected = isStart || isEnd;\r\n\r\n        const wrapperStyle: SxProps<Theme> = {\r\n            // isBetween일 때만 배경색을 적용하여 범위 느낌을 줍니다.\r\n            backgroundColor: isBetween ? theme => theme.palette.action.hover : 'transparent',\r\n            borderTopLeftRadius: isStart || isBetween ? '50%' : 0,\r\n            borderBottomLeftRadius: isStart || isBetween ? '50%' : 0,\r\n            borderTopRightRadius: isEnd || isBetween ? '50%' : 0,\r\n            borderBottomRightRadius: isEnd || isBetween ? '50%' : 0,\r\n            width: 40,\r\n            height: 36,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n        };\r\n\r\n        const dayStyle: SxProps<Theme> = {\r\n            ...(isSelected && {\r\n                backgroundColor: 'primary.main',\r\n                color: 'primary.contrastText',\r\n                '&:hover': {\r\n                    backgroundColor: 'primary.dark',\r\n                },\r\n                borderRadius: '50%',\r\n                width: 36,\r\n                height: 36,\r\n            }),\r\n        };\r\n\r\n        return (\r\n            <Box sx={wrapperStyle}>\r\n                <PickersDay\r\n                    day={day}\r\n                    outsideCurrentMonth={outsideCurrentMonth}\r\n                    {...other}\r\n                    sx={dayStyle}\r\n                />\r\n            </Box>\r\n        );\r\n    };\r\n}\r\n\r\n/**\r\n * 두 개의 달력을 사용하여 날짜 범위를 선택하는 커스텀 Date Range Picker 컴포넌트\r\n */\r\nconst DsDateRangePicker: React.FC<DsDateRangePickerProps> = ({\r\n                                                                 label = \"날짜 범위 선택\",\r\n                                                                 initialStartDate = null,\r\n                                                                 initialEndDate = null,\r\n                                                                 onChange,\r\n                                                             }) => {\r\n    const [anchorEl, setAnchorEl] = useState<HTMLDivElement | null>(null);\r\n    const [tempStartDate, setTempStartDate] = useState<Dayjs | null>(initialStartDate);\r\n    const [tempEndDate, setTempEndDate] = useState<Dayjs | null>(initialEndDate);\r\n    const [leftCalendarMonth, setLeftCalendarMonth] = useState<Dayjs>(initialStartDate || dayjs());\r\n\r\n    // Popover가 열릴 때마다 부모로부터 받은 초기값으로 임시 상태를 리셋합니다.\r\n    useEffect(() => {\r\n        if (anchorEl) {\r\n            setTempStartDate(initialStartDate);\r\n            setTempEndDate(initialEndDate);\r\n            setLeftCalendarMonth(initialStartDate || dayjs());\r\n        }\r\n    }, [anchorEl, initialStartDate, initialEndDate]);\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLDivElement> | React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(event.currentTarget as HTMLDivElement);\r\n    };\r\n\r\n    const handleConfirm = () => {\r\n        setAnchorEl(null);\r\n        if (onChange) {\r\n            onChange(tempStartDate, tempEndDate);\r\n        }\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleDateChange = (newValue: Dayjs | null) => {\r\n        if (tempStartDate && tempEndDate) {\r\n            setTempStartDate(newValue);\r\n            setTempEndDate(null);\r\n            return;\r\n        }\r\n\r\n        if (!tempStartDate) {\r\n            setTempStartDate(newValue);\r\n            return;\r\n        }\r\n\r\n        if (tempStartDate && !tempEndDate) {\r\n            if (newValue && newValue.isBefore(tempStartDate, 'day')) {\r\n                setTempEndDate(tempStartDate);\r\n                setTempStartDate(newValue);\r\n            } else {\r\n                setTempEndDate(newValue);\r\n            }\r\n        }\r\n    };\r\n\r\n    const open = Boolean(anchorEl);\r\n    const id = open ? 'date-range-popover' : undefined;\r\n\r\n    const displayValue = useMemo(() => {\r\n        if (initialStartDate && initialEndDate) {\r\n            return `${initialStartDate.format('YYYY.MM.DD')} ~ ${initialEndDate.format('YYYY.MM.DD')}`;\r\n        }\r\n        return '';\r\n    }, [initialStartDate, initialEndDate]);\r\n\r\n    const RangeDay = useMemo(() => createRangePickersDay(tempStartDate, tempEndDate), [tempStartDate, tempEndDate]);\r\n\r\n    return (\r\n        <LocalizationProvider dateAdapter={AdapterDayjs} adapterLocale=\"ko\">\r\n            <GlobalStyles styles={{\r\n                '.MuiDayCalendar-weekDayLabel': {\r\n                    width: 40,\r\n                    height: 36,\r\n                    margin: '0 auto',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                },\r\n            }} />\r\n\r\n            <TextField\r\n                fullWidth\r\n                label={label}\r\n                value={displayValue}\r\n                onClick={handleClick}\r\n                sx={{ cursor: 'pointer' }}\r\n                InputProps={{\r\n                    readOnly: true,\r\n                    endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                                aria-label=\"날짜 범위 선택 열기\"\r\n                                onClick={handleClick as React.MouseEventHandler<HTMLButtonElement>}\r\n                                edge=\"end\"\r\n                            >\r\n                                <CalendarMonthIcon />\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    ),\r\n                }}\r\n            />\r\n            <Popover\r\n                id={id}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={handleCancel}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <Box sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n                    <Stack direction=\"row\" spacing={2} sx={{ flexWrap: 'wrap', justifyContent: 'center' }}>\r\n                        <Box>\r\n                            <StaticDatePicker\r\n                                value={tempStartDate}\r\n                                onChange={handleDateChange}\r\n                                onMonthChange={(newMonth) => setLeftCalendarMonth(newMonth)}\r\n                                slots={{\r\n                                    actionBar: () => null,\r\n                                    toolbar: (props) => <CustomPickerHeader {...props} value={leftCalendarMonth} />,\r\n                                    day: RangeDay,\r\n                                }}\r\n                                referenceDate={leftCalendarMonth}\r\n                            />\r\n                        </Box>\r\n                        <Box>\r\n                            <StaticDatePicker\r\n                                value={tempEndDate}\r\n                                onChange={handleDateChange}\r\n                                referenceDate={leftCalendarMonth.add(1, 'month')}\r\n                                slots={{\r\n                                    actionBar: () => null,\r\n                                    toolbar: (props) => <CustomPickerHeader {...props} value={leftCalendarMonth.add(1, 'month')} />,\r\n                                    day: RangeDay,\r\n                                }}\r\n                            />\r\n                        </Box>\r\n                    </Stack>\r\n                    <Stack direction=\"row\" justifyContent=\"flex-end\" spacing={1} sx={{ mt: 2 }}>\r\n                        <Button onClick={handleCancel}>취소</Button>\r\n                        <Button variant=\"contained\" onClick={handleConfirm}>확인</Button>\r\n                    </Stack>\r\n                </Box>\r\n            </Popover>\r\n        </LocalizationProvider>\r\n    );\r\n};\r\n\r\nexport default DsDateRangePicker;","import React, { useState } from 'react';\r\nimport { Box, Typography, Stack } from '@mui/material';\r\nimport DsDatePicker from '../components/mui_x/date/DsDatePicker';\r\nimport { Dayjs } from 'dayjs';\r\nimport dayjs from 'dayjs';\r\n\r\n// LocalizationProvider와 AdapterDayjs를 임포트합니다.\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\n\r\nimport DsDateRangePicker from '../components/mui_x/date/DsDateRangePicker';\r\n\r\nexport default function DsDatePickerPage() {\r\n    const [controlledValue, setControlledValue] = useState<Dayjs | null>(dayjs());\r\n    const [disabledValue, setDisabledValue] = useState<Dayjs | null>(dayjs('2023-01-15'));\r\n\r\n    const [selectedRangeStartDate, setSelectedRangeStartDate] = useState<Dayjs | null>(null);\r\n    const [selectedRangeEndDate, setSelectedRangeEndDate] = useState<Dayjs | null>(null);\r\n\r\n    const handleRangeChange = (startDate: Dayjs | null, endDate: Dayjs | null) => {\r\n        setSelectedRangeStartDate(startDate);\r\n        setSelectedRangeEndDate(endDate);\r\n    };\r\n\r\n    return (\r\n        // 전체 컴포넌트를 LocalizationProvider로 감싸줍니다.\r\n        <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n            <Box sx={{ p: 3 }}>\r\n                <Typography variant=\"h1\" gutterBottom>\r\n                    Date Picker\r\n                </Typography>\r\n                <Typography color=\"text.secondary\" sx={{ mb: 4 }}>\r\n                    Date Picker는 달력 UI를 통해 날짜를 시각적으로 선택하는 데 중점을 둔 컴포넌트입니다.\r\n                </Typography>\r\n\r\n                <Stack spacing={3} direction=\"column\">\r\n                    {/* 제어 컴포넌트 예제 */}\r\n                    <Box>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            Controlled\r\n                        </Typography>\r\n                        <DsDatePicker\r\n                            label=\"날짜 선택\"\r\n                            value={controlledValue}\r\n                            onChange={(newValue: Dayjs | null) => {\r\n                                setControlledValue(newValue);\r\n                            }}\r\n                        />\r\n                        <Typography variant=\"body2\" sx={{ mt: 1 }}>\r\n                            선택된 날짜: {controlledValue ? controlledValue.format('YYYY.MM.DD') : '없음'}\r\n                        </Typography>\r\n                    </Box>\r\n\r\n                    {/* 비활성화된 컴포넌트 예제 */}\r\n                    <Box>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            Disabled\r\n                        </Typography>\r\n                        <DsDatePicker\r\n                            label=\"비활성화된 날짜\"\r\n                            value={disabledValue}\r\n                            onChange={(newValue: Dayjs | null) => setDisabledValue(newValue)}\r\n                            disabled\r\n                        />\r\n                    </Box>\r\n\r\n                    {/* 초기값 설정 예제 */}\r\n                    <Box>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            Read Only\r\n                        </Typography>\r\n                        <DsDatePicker\r\n                            label=\"초기값 설정\"\r\n                            value={dayjs('2024-03-01')}\r\n                            onChange={() => { }}\r\n                        />\r\n                    </Box>\r\n\r\n                    {/* Date Picker Range 예제 (DsDateRangePicker 활용) */}\r\n                    <Box>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            Date Range Picker (팝업 캘린더)\r\n                        </Typography>\r\n                        {/* DsDateRangePicker를 감싸는 Box에 너비 스타일을 적용합니다. */}\r\n                        <Box sx={{ width: '400px' }}>\r\n                            <DsDateRangePicker\r\n                                label=\"기간 선택\"\r\n                                onChange={handleRangeChange}\r\n                                initialStartDate={selectedRangeStartDate}\r\n                                initialEndDate={selectedRangeEndDate}\r\n                            />\r\n                        </Box>\r\n                        <Typography variant=\"body2\" sx={{ mt: 1 }}>\r\n                            선택된 기간: {selectedRangeStartDate ? selectedRangeStartDate.format('YYYY.MM.DD') : '없음'} ~ {selectedRangeEndDate ? selectedRangeEndDate.format('YYYY.MM.DD') : '없음'}\r\n                        </Typography>\r\n                    </Box>\r\n                </Stack>\r\n            </Box>\r\n        </LocalizationProvider>\r\n    );\r\n}"],"names":["DsDatePicker","_ref","value","onChange","label","disabled","minDate","maxDate","props","_objectWithoutProperties","_excluded","_jsx","LocalizationProvider","dateAdapter","AdapterDayjs","children","DatePicker","_objectSpread","format","CustomPickerHeader","Typography","variant","sx","textAlign","width","py","dayjs","initialStartDate","initialEndDate","anchorEl","setAnchorEl","useState","tempStartDate","setTempStartDate","tempEndDate","setTempEndDate","leftCalendarMonth","setLeftCalendarMonth","useEffect","handleClick","event","currentTarget","handleCancel","handleDateChange","newValue","isBefore","open","Boolean","id","undefined","displayValue","useMemo","concat","RangeDay","createRangePickersDay","selectedStart","selectedEnd","day","outsideCurrentMonth","other","isStart","isSame","isEnd","isBetween","isAfter","isSelected","wrapperStyle","backgroundColor","theme","palette","action","hover","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","height","display","alignItems","justifyContent","dayStyle","color","borderRadius","Box","PickersDay","_jsxs","adapterLocale","GlobalStyles","styles","margin","TextField","fullWidth","onClick","cursor","InputProps","readOnly","endAdornment","InputAdornment","position","IconButton","edge","CalendarMonthIcon","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","p","flexDirection","Stack","direction","spacing","flexWrap","StaticDatePicker","onMonthChange","newMonth","slots","actionBar","toolbar","referenceDate","add","mt","Button","handleConfirm","DsDatePickerPage","controlledValue","setControlledValue","disabledValue","setDisabledValue","selectedRangeStartDate","setSelectedRangeStartDate","selectedRangeEndDate","setSelectedRangeEndDate","gutterBottom","mb","DsDateRangePicker","handleRangeChange","startDate","endDate"],"sourceRoot":""}