{"version":3,"file":"static/js/193.a0f491d8.chunk.js","mappings":"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","sources":["components/navigation/DsStepper.tsx","pages/StepperPage.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n    Box,\r\n    Stepper,\r\n    Step,\r\n    StepLabel,\r\n    Button,\r\n    Typography,\r\n    StepperProps as MuiStepperProps,\r\n} from '@mui/material';\r\n\r\n// 각 스텝의 데이터 타입을 정의합니다.\r\nexport interface StepItem {\r\n    label: string;\r\n    optional?: boolean;\r\n}\r\n\r\n// DsStepper 컴포넌트가 받을 props 타입을 정의합니다.\r\ninterface DsStepperProps extends Omit<MuiStepperProps, 'activeStep' | 'children'> {\r\n    /** 각 스텝의 라벨과 옵션 여부를 담은 배열 */\r\n    steps: StepItem[];\r\n    /** 각 스텝에 해당하는 컨텐츠 ReactNode 배열. steps 배열과 길이가 같아야 합니다. */\r\n    stepContents: React.ReactNode[];\r\n}\r\n\r\n/**\r\n * 여러 단계로 구성된 프로세스를 안내하는 재사용 가능한 Stepper 컴포넌트입니다.\r\n * 스텝 정보와 각 스텝의 컨텐츠를 props로 받아 내부적으로 상태를 관리합니다.\r\n */\r\nconst DsStepper: React.FC<DsStepperProps> = ({ steps, stepContents, ...props }) => {\r\n    const [activeStep, setActiveStep] = useState(0);\r\n    const [skipped, setSkipped] = useState(new Set<number>());\r\n\r\n    const isStepSkipped = (step: number) => {\r\n        return skipped.has(step);\r\n    };\r\n\r\n    const handleNext = () => {\r\n        let newSkipped = skipped;\r\n        if (isStepSkipped(activeStep)) {\r\n            newSkipped = new Set(newSkipped.values());\r\n            newSkipped.delete(activeStep);\r\n        }\r\n\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n        setSkipped(newSkipped);\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n\r\n    const handleSkip = () => {\r\n        if (!steps[activeStep]?.optional) {\r\n            throw new Error(\"You can't skip a step that isn't optional.\");\r\n        }\r\n\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n        setSkipped((prevSkipped) => {\r\n            const newSkipped = new Set(prevSkipped.values());\r\n            newSkipped.add(activeStep);\r\n            return newSkipped;\r\n        });\r\n    };\r\n\r\n    const handleReset = () => {\r\n        setActiveStep(0);\r\n        setSkipped(new Set<number>());\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ width: '100%' }}>\r\n            <Stepper activeStep={activeStep} {...props}>\r\n                {steps.map((step, index) => {\r\n                    const stepProps: { completed?: boolean } = {};\r\n                    const labelProps: { optional?: React.ReactNode } = {};\r\n                    if (step.optional) {\r\n                        labelProps.optional = (\r\n                            <Typography variant=\"caption\">Optional</Typography>\r\n                        );\r\n                    }\r\n                    if (isStepSkipped(index)) {\r\n                        stepProps.completed = false;\r\n                    }\r\n                    return (\r\n                        <Step key={step.label} {...stepProps}>\r\n                            <StepLabel {...labelProps}>{step.label}</StepLabel>\r\n                        </Step>\r\n                    );\r\n                })}\r\n            </Stepper>\r\n\r\n            {/* 컨텐츠 및 버튼 영역 */}\r\n            {activeStep === steps.length ? (\r\n                <React.Fragment>\r\n                    <Typography sx={{ mt: 2, mb: 1 }}>\r\n                        All steps completed - you&apos;re finished\r\n                    </Typography>\r\n                    <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\r\n                        <Box sx={{ flex: '1 1 auto' }} />\r\n                        <Button onClick={handleReset}>Reset</Button>\r\n                    </Box>\r\n                </React.Fragment>\r\n            ) : (\r\n                <React.Fragment>\r\n                    {/* 각 스텝에 맞는 컨텐츠를 렌더링합니다. */}\r\n                    <Box sx={{ mt: 2, mb: 1, p: 2, border: '1px solid #ddd', borderRadius: 1 }}>\r\n                        {stepContents[activeStep]}\r\n                    </Box>\r\n                    <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\r\n                        <Button\r\n                            color=\"inherit\"\r\n                            disabled={activeStep === 0}\r\n                            onClick={handleBack}\r\n                            sx={{ mr: 1 }}\r\n                        >\r\n                            Back\r\n                        </Button>\r\n                        <Box sx={{ flex: '1 1 auto' }} />\r\n                        {steps[activeStep]?.optional && (\r\n                            <Button color=\"inherit\" onClick={handleSkip} sx={{ mr: 1 }}>\r\n                                Skip\r\n                            </Button>\r\n                        )}\r\n                        <Button onClick={handleNext}>\r\n                            {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\r\n                        </Button>\r\n                    </Box>\r\n                </React.Fragment>\r\n            )}\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default DsStepper;\r\n","// src/pages/StepperPage.tsx (예제 페이지)\r\n\r\nimport React from 'react';\r\nimport { Box, Typography, TextField } from '@mui/material';\r\nimport DsStepper, { StepItem } from '../components/navigation/DsStepper';\r\n\r\nconst StepperPage = () => {\r\n    // 1. Stepper에 표시할 단계 정보 정의\r\n    const steps: StepItem[] = [\r\n        { label: 'Enter your name' },\r\n        { label: 'Choose a password', optional: true },\r\n        { label: 'Confirm details' },\r\n    ];\r\n\r\n    // 2. 각 단계에 보여줄 컨텐츠 정의\r\n    const stepContents: React.ReactNode[] = [\r\n        // Step 1 Content\r\n        <Box>\r\n            <Typography>Please enter your full name.</Typography>\r\n            <TextField label=\"Full Name\" variant=\"outlined\" fullWidth margin=\"normal\" />\r\n        </Box>,\r\n        // Step 2 Content\r\n        <Box>\r\n            <Typography>This step is optional. You can set a password now or later.</Typography>\r\n            <TextField label=\"Password\" type=\"password\" variant=\"outlined\" fullWidth margin=\"normal\" />\r\n        </Box>,\r\n        // Step 3 Content\r\n        <Box>\r\n            <Typography>Please review your information before finishing.</Typography>\r\n        </Box>,\r\n    ];\r\n\r\n    return (\r\n        <Box sx={{ p: 3 }}>\r\n            <Typography variant=\"h4\" gutterBottom>\r\n                Stepper\r\n            </Typography>\r\n            <Typography color=\"text.secondary\" sx={{ mb: 4 }}>\r\n                Stepper는 사용자가 여러 단계를 거쳐 작업을 완료하도록 안내합니다.\r\n            </Typography>\r\n\r\n            <Typography variant=\"h6\" gutterBottom sx={{ mt: 4 }}>\r\n                Horizontal Stepper Example\r\n            </Typography>\r\n            <DsStepper steps={steps} stepContents={stepContents} />\r\n\r\n            <Typography variant=\"h6\" gutterBottom sx={{ mt: 6 }}>\r\n                Vertical Stepper Example\r\n            </Typography>\r\n            <DsStepper\r\n                steps={steps}\r\n                stepContents={stepContents}\r\n                orientation=\"vertical\"\r\n            />\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default StepperPage;"],"names":["_ref","_steps$activeStep2","steps","stepContents","props","_objectWithoutProperties","_excluded","activeStep","setActiveStep","useState","skipped","setSkipped","Set","isStepSkipped","step","has","_jsxs","Box","sx","width","children","_jsx","Stepper","_objectSpread","map","index","stepProps","labelProps","optional","Typography","variant","completed","Step","StepLabel","label","length","React","mt","mb","display","flexDirection","pt","flex","Button","onClick","handleReset","p","border","borderRadius","color","disabled","handleBack","prevActiveStep","mr","handleSkip","_steps$activeStep","Error","prevSkipped","newSkipped","values","add","handleNext","delete","StepperPage","TextField","fullWidth","margin","type","gutterBottom","DsStepper","orientation"],"sourceRoot":""}